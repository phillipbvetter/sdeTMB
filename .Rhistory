)
# Set observation equation variances
obj$add_observation_variances(
y ~ sigma_y^2
)
# Specify algebraic relations
obj$add_algebraics(
theta ~ exp(logtheta),
sigma_x ~ exp(logsigma_x),
sigma_y ~ exp(logsigma_y)
)
# Specify parameter initial values and lower/upper bounds in estimation
obj$add_parameters(
logtheta   = log(c(initial = 5,    lower = 0,    upper = 20)),
mu         = c(    initial = 0,    lower = -10,  upper = 10),
logsigma_x = log(c(initial = 1e-1, lower = 1e-5, upper = 5)),
logsigma_y = log(c(initial = 1e-1, lower = 1e-5, upper = 5))
)
# Set initial state mean and covariance
obj$set_initial_state(list(x[1], 1e-1*diag(1)))
obj$estimate(.data)
obj$estimate(.data,
method="ekf",
ode.solver="euler",
ode.timestep=min(diff(.data$t)),
loss = "quadratic",
loss_c = 3,
use.hessian = FALSE,
compile=FALSE,
control=list(trace=1)
)
# Chunk 1
library(sdeTMB)
# Chunk 2
# Simulate data using Euler Maruyama
set.seed(10)
theta=10; mu=1; sigma_x=1; sigma_y=1e-1
#
dt.sim = 1e-3
t.sim = seq(0,1,by=dt.sim)
dw = rnorm(length(t.sim)-1,sd=sqrt(dt.sim))
x = 3
for(i in 1:(length(t.sim)-1)) {
x[i+1] = x[i] + theta*(mu-x[i])*dt.sim + sigma_x*dw[i]
}
# Extract observations and add noise
dt.obs = 1e-2
t.obs = seq(0,1,by=dt.obs)
y = x[t.sim %in% t.obs] + sigma_y * rnorm(length(t.obs))
# Create data
.data = data.frame(
t = t.obs,
y = y
)
# Chunk 3
# Create model object
obj = sdeTMB$new()
# Set name of model (and the created .cpp file)
obj$set_modelname("ornstein_uhlenbeck")
# Add system equations
obj$add_systems(
dx ~ theta * (mu-x) * dt + sigma_x*dw
)
# Add observation equations
obj$add_observations(
y ~ x
)
# Set observation equation variances
obj$add_observation_variances(
y ~ sigma_y^2
)
# Specify algebraic relations
obj$add_algebraics(
theta ~ exp(logtheta),
sigma_x ~ exp(logsigma_x),
sigma_y ~ exp(logsigma_y)
)
# Specify parameter initial values and lower/upper bounds in estimation
obj$add_parameters(
logtheta   = log(c(initial = 5,    lower = 0,    upper = 20)),
mu         = c(    initial = 0,    lower = -10,  upper = 10),
logsigma_x = log(c(initial = 1e-1, lower = 1e-5, upper = 5)),
logsigma_y = log(c(initial = 1e-1, lower = 1e-5, upper = 5))
)
# Set initial state mean and covariance
obj$set_initial_state(list(x[1], 1e-1*diag(1)))
# Chunk 1
library(sdeTMB)
# Chunk 2
# Simulate data using Euler Maruyama
set.seed(10)
theta=10; mu=1; sigma_x=1; sigma_y=1e-1
#
dt.sim = 1e-3
t.sim = seq(0,1,by=dt.sim)
dw = rnorm(length(t.sim)-1,sd=sqrt(dt.sim))
x = 3
for(i in 1:(length(t.sim)-1)) {
x[i+1] = x[i] + theta*(mu-x[i])*dt.sim + sigma_x*dw[i]
}
# Extract observations and add noise
dt.obs = 1e-2
t.obs = seq(0,1,by=dt.obs)
y = x[t.sim %in% t.obs] + sigma_y * rnorm(length(t.obs))
# Create data
.data = data.frame(
t = t.obs,
y = y
)
# Chunk 3
# Create model object
obj = sdeTMB$new()
# Set name of model (and the created .cpp file)
obj$set_modelname("ornstein_uhlenbeck")
# Add system equations
obj$add_systems(
dx ~ theta * (mu-x) * dt + sigma_x*dw
)
# Add observation equations
obj$add_observations(
y ~ x
)
# Set observation equation variances
obj$add_observation_variances(
y ~ sigma_y^2
)
# Specify algebraic relations
obj$add_algebraics(
theta ~ exp(logtheta),
sigma_x ~ exp(logsigma_x),
sigma_y ~ exp(logsigma_y)
)
# Specify parameter initial values and lower/upper bounds in estimation
obj$add_parameters(
logtheta   = log(c(initial = 5,    lower = 0,    upper = 20)),
mu         = c(    initial = 0,    lower = -10,  upper = 10),
logsigma_x = log(c(initial = 1e-1, lower = 1e-5, upper = 5)),
logsigma_y = log(c(initial = 1e-1, lower = 1e-5, upper = 5))
)
# Set initial state mean and covariance
obj$set_initial_state(list(x[1], 1e-1*diag(1)))
# Chunk 1
library(sdeTMB)
# Chunk 2
# Simulate data using Euler Maruyama
set.seed(10)
theta=10; mu=1; sigma_x=1; sigma_y=1e-1
#
dt.sim = 1e-3
t.sim = seq(0,1,by=dt.sim)
dw = rnorm(length(t.sim)-1,sd=sqrt(dt.sim))
x = 3
for(i in 1:(length(t.sim)-1)) {
x[i+1] = x[i] + theta*(mu-x[i])*dt.sim + sigma_x*dw[i]
}
# Extract observations and add noise
dt.obs = 1e-2
t.obs = seq(0,1,by=dt.obs)
y = x[t.sim %in% t.obs] + sigma_y * rnorm(length(t.obs))
# Create data
.data = data.frame(
t = t.obs,
y = y
)
# Chunk 3
# Create model object
obj = sdeTMB$new()
# Set name of model (and the created .cpp file)
obj$set_modelname("ornstein_uhlenbeck")
# Add system equations
obj$add_systems(
dx ~ theta * (mu-x) * dt + sigma_x*dw
)
# Add observation equations
obj$add_observations(
y ~ x
)
# Set observation equation variances
obj$add_observation_variances(
y ~ sigma_y^2
)
# Specify algebraic relations
obj$add_algebraics(
theta ~ exp(logtheta),
sigma_x ~ exp(logsigma_x),
sigma_y ~ exp(logsigma_y)
)
# Specify parameter initial values and lower/upper bounds in estimation
obj$add_parameters(
logtheta   = log(c(initial = 5,    lower = 0,    upper = 20)),
mu         = c(    initial = 0,    lower = -10,  upper = 10),
logsigma_x = log(c(initial = 1e-1, lower = 1e-5, upper = 5)),
logsigma_y = log(c(initial = 1e-1, lower = 1e-5, upper = 5))
)
# Set initial state mean and covariance
obj$set_initial_state(list(x[1], 1e-1*diag(1)))
# Chunk 1
library(sdeTMB)
# Chunk 2
# Create model object
obj = sdeTMB$new()
# Set name of model (and the created .cpp file)
obj$set_modelname("ornstein_uhlenbeck")
# Add system equations
obj$add_systems(
dx ~ theta * (mu-x) * dt + sigma_x*dw
)
# Chunk 3
obj$add_observations(
log(y) ~ x, obsnames = "log_y"
)
# Chunk 4
obj$add_observation_variances(
y ~ sigma_y^2
)
library(sdeTMB)
# Create model object
obj = sdeTMB$new()
# Set name of model (and the created .cpp file)
obj$set_modelname("ornstein_uhlenbeck")
# Add system equations
obj$add_systems(
dx ~ theta * (mu-x) * dt + sigma_x*dw
)
obj$add_observations(
log(y) ~ x, obsnames = "log_y"
)
obj$add_observation_variances(
y ~ sigma_y^2
)
obj$add_observation_variances(
log_y ~ sigma_y^2
)
obj$add_observations(
log(y) ~ x,
y ~ x,
y^2+z^3 ~ x,
obsnames = c("log_y", NA, "y2_plus_z3")
)
obj$add_observations(
log(y) ~ x,
y ~ x,
y^2+z^3 ~ x,
obsnames = c("log_y", NA, "y2_plus_z3")
)
obj
obj$.__enclos_env__$
private
obj$.__enclos_env__$private$obs.eqs$log_y
obj$.__enclos_env__$private$obs.var$log_y
obj$.__enclos_env__$private$obs.var
obj$add_observations(
log(y) ~ x, obsnames = "log_y"
)
obj
library(sdeTMB)
# Create model object
obj = sdeTMB$new()
# Set name of model (and the created .cpp file)
obj$set_modelname("ornstein_uhlenbeck")
# Add system equations
obj$add_systems(
dx ~ theta * (mu-x) * dt + sigma_x*dw
)
obj$add_observations(
log(y) ~ x, obsnames = "log_y"
)
obj
obj$add_observation_variances(
y ~ sigma_y^2
)
obj
obj$add_observation_variances(
log_y ~ sigma_y^2
)
obj
obj$add_observations(
log(y) ~ x,
y ~ x,
y^2+z^3 ~ x,
obsnames = c("log_y", NA, "y2_plus_z3")
)
obj
obj$.__enclos_env__$private$obsvar.names
obj
obj$.__enclos_env__$private$obs.names
# Create model object
obj = sdeTMB$new()
# Set name of model (and the created .cpp file)
obj$set_modelname("ornstein_uhlenbeck")
# Add system equations
obj$add_systems(
dx ~ theta * (mu-x) * dt + sigma_x*dw
)
obj$add_observations(
log(y) ~ x, obsnames = "log_y"
)
obj$add_observation_variances(
y ~ sigma_y^2
)
obj$add_observation_variances(
log_y ~ sigma_y^2
)
obj
obj$add_observations(log(y) ~ x , obsnames="log_y")
obj
obj$.__enclos_env__$private$obsvar.names
obj$.__enclos_env__$private$obs.var
obj$.__enclos_env__$private$obs.var
obj$.__enclos_env__$private$obs.var[[1]]
obj$.__enclos_env__$private$obs.var[[1]]$rhs
obj$.__enclos_env__$private$obs.var[[1]]
T & T
T & F
# setwd("/Users/pbrve/github/sdeTMB")
# library(sdeTMB)
devtools::document("~/github/sdeTMB")
# Create model object
obj = sdeTMB$new()
# Set name of model (and the created .cpp file)
obj$set_modelname("ornstein_uhlenbeck")
# Add system equations
obj$add_systems(
dx ~ theta * (mu-x) * dt + sigma_x*dw
)
obj$add_observations(
log(y) ~ x, obsnames = "log_y"
)
obj$add_observation_variances(
y ~ sigma_y^2
)
obj$add_observation_variances(
log_y ~ sigma_y^2
)
obj$add_observations(
log(y) ~ x,
y ~ x,
y^2+z^3 ~ x,
obsnames = c("log_y", NA, "y2_plus_z3")
)
obj$add_observations(log(y) ~ x , obsnames="log_y")
obj$.__enclos_env__$private$obsvar.names
obj$.__enclos_env__$private$obs.var[[1]]
obj$add_observations(
log(y) ~ x,
y ~ x,
y^2+z^3 ~ x,
obsnames = c("log_y", NA, "y2_plus_z3")
)
obj$add_observations(log(y) ~ x , obsnames="log_y")
obj$.__enclos_env__$private$obsvar.names
obj$.__enclos_env__$private$obs.var[[1]]
objj
obj
# Chunk 1
library(sdeTMB)
# Chunk 2
# Create model object
obj = sdeTMB$new()
# Set name of model (and the created .cpp file)
obj$set_modelname("ornstein_uhlenbeck")
# Add system equations
obj$add_systems(
dx ~ theta * (mu-x) * dt + sigma_x*dw
)
# Chunk 3
obj$add_observations(
log(y) ~ x, obsnames = "log_y"
)
# Chunk 4
obj$add_observation_variances(
y ~ sigma_y^2
)
obj$add_observation_variances(
y ~ sigma_y^2
)
obj$add_observation_variances(
y ~ sigma_y^2
)
5+5
obj$add_observation_variances(
y ~ sigma_y^2
)
# Chunk 1
library(sdeTMB)
# Chunk 2
# Create model object
obj = sdeTMB$new()
# Set name of model (and the created .cpp file)
obj$set_modelname("ornstein_uhlenbeck")
# Add system equations
obj$add_systems(
dx ~ theta * (mu-x) * dt + sigma_x*dw
)
# Chunk 3
obj$add_observations(
log(y) ~ x, obsnames = "log_y"
)
# Chunk 4
obj$add_observation_variances(
y ~ sigma_y^2
)
5+5
library(sdeTMB)
# Simulate data using Euler Maruyama
set.seed(10)
theta=10; mu=1; sigma_x=1; sigma_y=1e-1
#
dt.sim = 1e-3
t.sim = seq(0,1,by=dt.sim)
dw = rnorm(length(t.sim)-1,sd=sqrt(dt.sim))
x = 3
for(i in 1:(length(t.sim)-1)) {
x[i+1] = x[i] + theta*(mu-x[i])*dt.sim + sigma_x*dw[i]
}
# Extract observations and add noise
dt.obs = 1e-2
t.obs = seq(0,1,by=dt.obs)
y = x[t.sim %in% t.obs] + sigma_y * rnorm(length(t.obs))
# Create data
.data = data.frame(
t = t.obs,
y = y
)
# Create model object
obj = sdeTMB$new()
# Set name of model (and the created .cpp file)
obj$set_modelname("ornstein_uhlenbeck")
# Add system equations
obj$add_systems(
dx ~ theta * (mu-x) * dt + sigma_x*dw
)
# Add observation equations
obj$add_observations(
y ~ x
)
# Set observation equation variances
obj$add_observation_variances(
y ~ sigma_y^2
)
# Specify algebraic relations
obj$add_algebraics(
theta ~ exp(logtheta),
sigma_x ~ exp(logsigma_x),
sigma_y ~ exp(logsigma_y)
)
# Specify parameter initial values and lower/upper bounds in estimation
obj$add_parameters(
logtheta   = log(c(initial = 5,    lower = 0,    upper = 20)),
mu         = c(    initial = 0,    lower = -10,  upper = 10),
logsigma_x = log(c(initial = 1e-1, lower = 1e-5, upper = 5)),
logsigma_y = log(c(initial = 1e-1, lower = 1e-5, upper = 5))
)
# Set initial state mean and covariance
obj$set_initial_state(list(x[1], 1e-1*diag(1)))
pred = obj$predict(.data)
pred = obj$predict(.data)
pred = obj$predict(.data)
# library(sdeTMB)
setwd("/Users/pbrve/github/sdeTMB")
# Simulate data using Euler Maruyama
set.seed(10)
theta=10; mu=1; sigma_x=1; sigma_y=1e-1
#
dt.sim = 1e-3
t.sim = seq(0,1,by=dt.sim)
dw = rnorm(length(t.sim)-1,sd=sqrt(dt.sim))
x = 3
for(i in 1:(length(t.sim)-1)) {
x[i+1] = x[i] + theta*(mu-x[i])*dt.sim + sigma_x*dw[i]
}
# Extract observations and add noise
dt.obs = 1e-2
t.obs = seq(0,1,by=dt.obs)
y = x[t.sim %in% t.obs] + sigma_y * rnorm(length(t.obs))
# Create data
.data = data.frame(
t = t.obs,
y = y
)
# Create model object
obj = sdeTMB$new()
# Set name of model (and the created .cpp file)
obj$set_modelname("ornstein_uhlenbeck")
# Add system equations
obj$add_systems(
dx ~ theta * (mu-x) * dt + sigma_x*dw
)
# Add observation equations
obj$add_observations(
y ~ x
)
# Set observation equation variances
obj$add_observation_variances(
y ~ sigma_y^2
)
# Specify algebraic relations
obj$add_algebraics(
theta ~ exp(logtheta),
sigma_x ~ exp(logsigma_x),
sigma_y ~ exp(logsigma_y)
)
# Specify parameter initial values and lower/upper bounds in estimation
obj$add_parameters(
logtheta   = log(c(initial = 5,    lower = 0,    upper = 20)),
mu         = c(    initial = 0,    lower = -10,  upper = 10),
logsigma_x = log(c(initial = 1e-1, lower = 1e-5, upper = 5)),
logsigma_y = log(c(initial = 1e-1, lower = 1e-5, upper = 5))
)
# Set initial state mean and covariance
obj$set_initial_state(list(x[1], 1e-1*diag(1)))
pred = obj$predict(.data)
