[{"path":[]},{"path":"/TODO.html","id":"prediction-function-without-data-update","dir":"","previous_headings":"","what":"Prediction function without data update","title":"add_parameters","text":"moment diff eqs simulation (stochastic!)","code":""},{"path":[]},{"path":"/TODO.html","id":null,"dir":"","previous_headings":"","what":"add_parameters","title":"add_parameters","text":"doesnt remove fixed parameter recalling add_parameters without NA’s. need update ","code":""},{"path":[]},{"path":"/articles/construct_nll.html","id":"simulate-from-the-ornstein-uhlenbeck-process","dir":"Articles","previous_headings":"","what":"Simulate from the Ornstein-Uhlenbeck process","title":"construct_nll: How to extract function handlers, and choosing your own optimizer","text":"use common Ornstein-Uhlenbeck process showcase use construct_nll. \\[ \\mathrm{d}X_{t} = \\theta (\\mu - X_{t}) \\, \\mathrm{d}t \\, + \\sigma_{X} \\, \\mathrm{d}B_{t} \\] \\[ Y_{t_{k}} = X_{t_{k}} + e_{t_{k}}, \\qquad e_{t_{k}} \\sim \\mathcal{N}\\left(0,\\sigma_{Y}^{2}\\right)   \\] first create data simulating process","code":"# Simulate data using Euler Maruyama set.seed(10) theta=10; mu=1; sigma_x=1; sigma_y=1e-1 #  dt.sim = 1e-3 t.sim = seq(0,1,by=dt.sim) dw = rnorm(length(t.sim)-1,sd=sqrt(dt.sim)) x = 3 for(i in 1:(length(t.sim)-1)) {   x[i+1] = x[i] + theta*(mu-x[i])*dt.sim + sigma_x*dw[i] }  # Extract observations and add noise dt.obs = 1e-2 t.obs = seq(0,1,by=dt.obs) y = x[t.sim %in% t.obs] + sigma_y * rnorm(length(t.obs))  # Create data .data = data.frame(   t = t.obs,   y = y )"},{"path":"/articles/construct_nll.html","id":"construct-model-object","dir":"Articles","previous_headings":"","what":"Construct model object","title":"construct_nll: How to extract function handlers, and choosing your own optimizer","text":"now construct sdeTMB model object","code":"# Create model object obj = sdeTMB$new()  # Set name of model (and the created .cpp file) obj$set_modelname(\"ornstein_uhlenbeck\")  # Add system equations obj$add_systems(   dx ~ theta * (mu-x) * dt + sigma_x*dw )  # Add observation equations obj$add_observations(   y ~ x )  # Set observation equation variances obj$add_observation_variances(   y ~ sigma_y^2 )  # Specify algebraic relations obj$add_algebraics(   theta ~ exp(logtheta),   sigma_x ~ exp(logsigma_x),   sigma_y ~ exp(logsigma_y) )  # Specify parameter initial values and lower/upper bounds in estimation obj$add_parameters(   logtheta   = log(c(initial = 5,    lower = 0,    upper = 20)),   mu         = c(    initial = 0,    lower = -10,  upper = 10),   logsigma_x = log(c(initial = 1e-1, lower = 1e-5, upper = 5)),   logsigma_y = log(c(initial = 1e-1, lower = 1e-5, upper = 5)) )  # Set initial state mean and covariance obj$set_initial_state(list(x[1], 1e-1*diag(1)))"},{"path":"/articles/construct_nll.html","id":"estimation","dir":"Articles","previous_headings":"","what":"Estimation","title":"construct_nll: How to extract function handlers, and choosing your own optimizer","text":"principle ready call estimate method run optimization scheme using built-optimization uses stats::nlminb .e. Inside package optimise objective function respect fixed parameters using construction function handlers TMB::MakeADFun parsing stats::nlminb .e.","code":"fit = obj$estimate(.data) ## Building model... ## Checking data... ## Constructing objective function and derivative tables... ## ...took: 0.007 seconds. ## Minimizing the negative log-likelihood... ##   0:     915.71828:  1.60944  0.00000 -2.30259 -2.30259 ##   1:     70.083379:  1.05724 0.615164 -1.83518 -1.98924 ##   2:     30.516529:  1.46070 0.571027 -1.52307 -1.13026 ##   3:     26.485474:  1.20713  1.44110 -1.25632 -1.45818 ##   4:    0.69753098:  1.16530  1.06092 -0.940764 -1.52249 ##   5:    -29.578711:  1.69151 0.929750 0.631226 -2.63369 ##   6:    -32.641765:  1.71651 0.927264 0.457807 -2.65530 ##   7:    -33.691413:  1.81987 0.910287 0.321691 -2.61438 ##   8:    -35.580965:  2.12802 0.855363 0.305584 -2.45172 ##   9:    -36.903805:  2.77032  1.08837 0.132724 -2.06057 ##  10:    -38.137542:  2.76625  1.07544 0.111198 -2.16627 ##  11:    -38.547917:  2.74970  1.08203 0.118075 -2.27330 ##  12:    -38.554807:  2.65268  1.08157 0.166259 -2.28262 ##  13:    -38.566248:  2.68392  1.04390 0.156325 -2.30410 ##  14:    -38.650018:  2.72971  1.07243 0.162998 -2.30421 ##  15:    -38.663639:  2.74937  1.07694 0.196589 -2.30768 ##  16:    -38.668540:  2.75909  1.07748 0.191454 -2.31395 ##  17:    -38.668766:  2.75714  1.07641 0.192447 -2.31609 ##  18:    -38.668775:  2.75777  1.07654 0.193094 -2.31661 ##  19:    -38.668775:  2.75779  1.07654 0.193117 -2.31663 ##  20:    -38.668775:  2.75779  1.07654 0.193117 -2.31663 ##   Optimization finished!: ##             Elapsed time: 0.005 seconds. ##             The objective value is: -3.866878e+01 ##             The maximum gradient component is: 1.8e-07 ##             The convergence message is: both X-convergence and relative convergence (5) ##             Iterations: 20 ##             Evaluations: Fun: 25 Grad: 21 ##             See stats::nlminb for available tolerance/control arguments. ## Returning results... ## Finished! nll = TMB::MakeADFun(...) opt = nlminb(start=nll$par, objective=nll$fn, grad=nll$gr, hessian=nll$he)"},{"path":"/articles/construct_nll.html","id":"extract-function-handlers","dir":"Articles","previous_headings":"","what":"Extract function handlers","title":"construct_nll: How to extract function handlers, and choosing your own optimizer","text":"construct_nll method allows retrieve nll object holds negative log-likelihood, derivatives. method takes arguments similar estimate. initial parameters (supplied user) stored objective function can evaluted gradient can evaluted hessian can evaluted can now use optimize function using e.g. stats::optim instead.","code":"nll = obj$construct_nll(.data) ## Building model... ## Checking data... ## Constructing objective function... ## ...took: 0.012 seconds. ## Succesfully returned function handlers nll$par ##   logtheta         mu logsigma_x logsigma_y  ##   1.609438   0.000000  -2.302585  -2.302585 nll$fn(nll$par) ## [1] 915.7183 nll$gr(nll$par) ##          [,1]      [,2]      [,3]      [,4] ## [1,] 1413.301 -1574.451 -1196.276 -801.9666 nll$he(nll$par) ##           [,1]       [,2]       [,3]       [,4] ## [1,]  2184.127 -2837.6171 -1639.8825 -1194.9684 ## [2,] -2837.617  1643.7843  2259.6676   892.1926 ## [3,] -1639.882  2259.6676   915.3926  1486.2728 ## [4,] -1194.968   892.1926  1486.2728   306.5493"},{"path":"/articles/construct_nll.html","id":"extract-parameter-lowerupper-bounds","dir":"Articles","previous_headings":"","what":"Extract parameter lower/upper bounds","title":"construct_nll: How to extract function handlers, and choosing your own optimizer","text":"can extract parameter bounds specified calling add_parameters() method using get_parameters method (note nll$par pars$initial identical).","code":"pars = obj$get_parameters() print(pars) ##            type   estimate   initial     lower     upper ## logtheta   free  2.7577902  1.609438      -Inf  2.995732 ## mu         free  1.0765425  0.000000 -10.00000 10.000000 ## logsigma_x free  0.1931173 -2.302585 -11.51293  1.609438 ## logsigma_y free -2.3166274 -2.302585 -11.51293  1.609438"},{"path":"/articles/construct_nll.html","id":"optimize-manually-using-statsoptim","dir":"Articles","previous_headings":"","what":"Optimize manually using stats::optim","title":"construct_nll: How to extract function handlers, and choosing your own optimizer","text":"supply initial parameter values, objective function handler gradient handler, parameter bounds optim.","code":"opt = stats::optim(par=nll$par,                     fn=nll$fn,                     gr=nll$gr,                     method=\"L-BFGS-B\",                     lower=pars$lower,                     upper=pars$upper)"},{"path":"/articles/construct_nll.html","id":"compare-results-between-the-two-optimizers","dir":"Articles","previous_headings":"","what":"Compare results between the two optimizers","title":"construct_nll: How to extract function handlers, and choosing your own optimizer","text":"Lets compare results using stats::optim extracted function handler versus internal optimisation uses stats::nlminb stored fit:","code":"# Estimated parameters data.frame(external=opt$par, internal=fit$par.fixed) ##              external   internal ## logtheta    2.7577960  2.7577902 ## mu          1.0765431  1.0765425 ## logsigma_x  0.1931184  0.1931173 ## logsigma_y -2.3166255 -2.3166274 # Neg. Log-Likelihood data.frame(external=opt$value, internal=fit$nll) ##    external  internal ## 1 -38.66878 -38.66878 # Gradient components data.frame(external=t(nll$gr(opt$par)), internal=t(nll$gr(fit$par.fixed))) ##       external      internal ## 1 9.631765e-05  5.788554e-08 ## 2 2.095449e-05 -1.778654e-07 ## 3 6.934801e-05  3.715852e-08 ## 4 1.466123e-04  4.008002e-08"},{"path":"/articles/estimate.html","id":"construct-model-object","dir":"Articles","previous_headings":"","what":"Construct model object","title":"estimate: Estimating model parameters and states","text":"now construct sdeTMB model object per usual","code":"# Create model object obj = sdeTMB$new()  # Set name of model (and the created .cpp file) obj$set_modelname(\"ornstein_uhlenbeck\")  # Add system equations obj$add_systems(   dx ~ theta * (mu-x) * dt + sigma_x*dw )  # Add observation equations obj$add_observations(   y ~ x )  # Set observation equation variances obj$add_observation_variances(   y ~ sigma_y^2 )  # Specify algebraic relations obj$add_algebraics(   theta ~ exp(logtheta),   sigma_x ~ exp(logsigma_x),   sigma_y ~ exp(logsigma_y) )  # Specify parameter initial values and lower/upper bounds in estimation obj$add_parameters(   logtheta   = log(c(initial = 5,    lower = 0,    upper = 20)),   mu         = c(    initial = 0,    lower = -10,  upper = 10),   logsigma_x = log(c(initial = 1e-1, lower = 1e-5, upper = 5)),   logsigma_y = log(c(initial = 1e-1, lower = 1e-5, upper = 5)) )  # Set initial state mean and covariance obj$set_initial_state(list(x[1], 1e-1*diag(1)))"},{"path":"/articles/estimate.html","id":"using-estimate---default-settings","dir":"Articles","previous_headings":"","what":"Using estimate - default settings","title":"estimate: Estimating model parameters and states","text":"can run estimate directly default settings using default settings Let’s walk various arguments effect:","code":"obj$estimate(.data) obj$estimate(data = .data,               method = \"ekf\",              ode.solver = \"rk4\",              ode.timestep = diff(data$t),              loss = \"quadratic\",              loss_c = 3,              unscented_hyperpars = list(alpha=1, beta=0, kappa=3-private$number.of.states),              control = list(trace=1,iter.max=1e5,eval.max=1e5),              use.hessian = FALSE,              laplace.residuals = FALSE,              unconstrained.optim = FALSE,              compile = FALSE,              silent = FALSE)"},{"path":"/articles/estimate.html","id":"argument-method","dir":"Articles","previous_headings":"","what":"Argument: method","title":"estimate: Estimating model parameters and states","text":"method argument determines underlying estimation techniques used. current implementation supports following method='ekf': Extended Kalman Filter. method='ukf': Unscented Kalman Filter - currently disabled. method='laplace': Laplace Approximation former two quite similar based Kalman Filter theory. assumptions normality state transition observation equation fundamental, although implemented filters standard non-linear filters, sense try overcome assumptions small non-linearities. Unscented Kalman Filter generally considered perform better cases. latter laplace method employs Laplace Approximation method integration random effects. formulation consider states random effects, parameters fixed. underlying assumption one normality, implementation allows flexibility choosing arbitrary distributions (yet implemented.) methods can used estimate parameter states. case laplace states smoothed (conditioned past future observations).","code":""},{"path":"/articles/estimate.html","id":"argument-ode-solver","dir":"Articles","previous_headings":"","what":"Argument: ode.solver","title":"estimate: Estimating model parameters and states","text":"argument used Kalman Filter methods .e. ekf ukf. argument determines algorithm used integrate forward moment (mean variance) differential equations. current implementation supports ode.solver='euler': forward Euler scheme ode.solver='rk4': 4th order Runge-Kutta scheme","code":""},{"path":"/articles/estimate.html","id":"argument-ode-timestep","dir":"Articles","previous_headings":"","what":"Argument: ode.timestep","title":"estimate: Estimating model parameters and states","text":"argument determines time-step used ODE solvers","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"/articles/observation_equations.html","id":"adding-observation-equations","dir":"Articles","previous_headings":"","what":"Adding observation equations","title":"observations: Using functions on the left-hand side","text":"Let’s assume observations \\(y_{t}\\) log-normally distributed conditioned \\(x_{t}\\) .e. \\[ \\log y_{t_{}} \\sim \\mathcal{N}(x_{t_{}},\\sigma_{y}^{2}) \\] sufficient user provide data column y provided data.frame e.g. estimate predict adding following observation equation Note kind observation equations, left-hand side function one () observed variables must explicitly named using obsnames argument.","code":"obj$add_observations(   log(y) ~ x, obsnames = \"log_y\" )"},{"path":"/articles/observation_equations.html","id":"adding-observation-variances","dir":"Articles","previous_headings":"","what":"Adding observation variances","title":"observations: Using functions on the left-hand side","text":"names given obsnames important needed specify observation variance. example code work, observation named log_y correct way add observation variance :","code":"obj$add_observation_variances(   y ~ sigma_y^2 ) ## Error in check_observation_variance_eqs(form, self, private): Please add an observation equation for y before specifying its variance obj$add_observation_variances(   log_y ~ sigma_y^2 )"},{"path":"/articles/observation_equations.html","id":"multiple-observation-equations","dir":"Articles","previous_headings":"","what":"Multiple observation equations","title":"observations: Using functions on the left-hand side","text":"must supply multiple obsnames supplying multiple observatin equations, although name used left-hand side just single variable .e.","code":"obj$add_observations(   log(y) ~ x,   y ~ x,   y^2+z^3 ~ x,   obsnames = c(\"log_y\", NA, \"y2_plus_z3\") )"},{"path":"/articles/predict.html","id":"simulate-from-the-ornstein-uhlenbeck-process","dir":"Articles","previous_headings":"","what":"Simulate from the Ornstein-Uhlenbeck process","title":"predict: Forecasting the model states and observations.","text":"use Ornstein-Uhlenbeck process . \\[ \\mathrm{d}X_{t} = \\theta (\\mu - X_{t}) \\, \\mathrm{d}t \\, + \\sigma_{X} \\, \\mathrm{d}B_{t} \\] \\[ Y_{t_{k}} = X_{t_{k}} + e_{t_{k}}, \\qquad e_{t_{k}} \\sim \\mathcal{N}\\left(0,\\sigma_{Y}^{2}\\right)   \\] first create data simulating process","code":"# Simulate data using Euler Maruyama set.seed(10) theta=10; mu=1; sigma_x=1; sigma_y=1e-1 #  dt.sim = 1e-3 t.sim = seq(0,1,by=dt.sim) dw = rnorm(length(t.sim)-1,sd=sqrt(dt.sim)) x = 3 for(i in 1:(length(t.sim)-1)) {   x[i+1] = x[i] + theta*(mu-x[i])*dt.sim + sigma_x*dw[i] }  # Extract observations and add noise dt.obs = 1e-2 t.obs = seq(0,1,by=dt.obs) y = x[t.sim %in% t.obs] + sigma_y * rnorm(length(t.obs))  # Create data .data = data.frame(   t = t.obs,   y = y )"},{"path":"/articles/predict.html","id":"construct-model-object","dir":"Articles","previous_headings":"","what":"Construct model object","title":"predict: Forecasting the model states and observations.","text":"now construct sdeTMB model object","code":"# Create model object obj = sdeTMB$new()  # Set name of model (and the created .cpp file) obj$set_modelname(\"ornstein_uhlenbeck\")  # Add system equations obj$add_systems(   dx ~ theta * (mu-x) * dt + sigma_x*dw )  # Add observation equations obj$add_observations(   y ~ x )  # Set observation equation variances obj$add_observation_variances(   y ~ sigma_y^2 )  # Specify algebraic relations obj$add_algebraics(   theta ~ exp(logtheta),   sigma_x ~ exp(logsigma_x),   sigma_y ~ exp(logsigma_y) )  # Specify parameter initial values and lower/upper bounds in estimation obj$add_parameters(   logtheta   = log(c(initial = 5,    lower = 0,    upper = 20)),   mu         = c(    initial = 0,    lower = -10,  upper = 10),   logsigma_x = log(c(initial = 1e-1, lower = 1e-5, upper = 5)),   logsigma_y = log(c(initial = 1e-1, lower = 1e-5, upper = 5)) )  # Set initial state mean and covariance obj$set_initial_state(list(x[1], 1e-1*diag(1)))"},{"path":"/articles/predict.html","id":"predict","dir":"Articles","previous_headings":"","what":"Predict","title":"predict: Forecasting the model states and observations.","text":"can use predict function without called estimate first, case initial value parameters provided add_parameters used. output predict list two data.frames, one states one observations. two data.frames share five initial columns contain indices j, associated time-points t.t.j, k.ahead contain indices, time-points associated k-step ahead , state/observation values associated standard deviations, observations provided data, predicted observation values based predicted state values. indices . j. table refer expectation variance state vector \\[ \\mathrm{E}(x_{t_{}} | x_{t_{j}}, y_{t_{j}}) \\\\ \\mathrm{V}(x_{t_{}} | x_{t_{j}}, y_{t_{j}}) \\] moments given indices \\(\\) (time \\(t_{}\\)) conditioned information available indices \\(j\\) (time \\(t_{j}\\)). sense state/covariance predictions \\(=j\\) posterior estimates, others prior estimates. default standard deviations states returned. entire covariance matrix elements can returned via","code":"pred = obj$predict(.data) head(pred$states) ##   i. j.  t.i  t.j k.ahead        x       var.x ## 1  0  0 0.00 0.00       0 3.000000 0.100000000 ## 2  0  1 0.00 0.01       1 2.853688 0.090578913 ## 3  1  1 0.01 0.01       0 2.704116 0.009005756 ## 4  1  2 0.01 0.02       1 2.572235 0.008243908 ## 5  2  2 0.02 0.02       0 2.600410 0.004518718 ## 6  2  3 0.02 0.03       1 2.473587 0.004183868 head(pred$observations) ##     i. j.  t.i  t.j k.ahead        y   y.data ## 1    0  0 0.00 0.00       0 3.000000 3.105001 ## 2    0  1 0.00 0.01       1 2.853688 2.687603 ## 2.1  1  1 0.01 0.01       0 2.704116 2.687603 ## 3    1  2 0.01 0.02       1 2.572235 2.634588 ## 3.1  2  2 0.02 0.02       0 2.600410 2.634588 ## 4    2  3 0.02 0.03       1 2.473587 2.267096 obj$predict(.data, return.covariance = TRUE)"},{"path":"/articles/predict.html","id":"set-number-of-prediction-steps","dir":"Articles","previous_headings":"","what":"Set number of prediction steps","title":"predict: Forecasting the model states and observations.","text":"number time steps ahead predictions desired can changed k.ahead argument. default behaviour save prediction steps 1 k.ahead selected desired, return.k.ahead argument can used indicate kept output.","code":"pred1 = obj$predict(.data, k.ahead=2) pred2 = obj$predict(.data, k.ahead=10, return.k.ahead=c(2,5,8)) head(pred1$states) ##   i. j.  t.i  t.j k.ahead        x       var.x ## 1  0  0 0.00 0.00       0 3.000000 0.100000000 ## 2  0  1 0.00 0.01       1 2.853688 0.090578913 ## 3  0  2 0.00 0.02       2 2.714512 0.082054359 ## 4  1  1 0.01 0.01       0 2.704116 0.009005756 ## 5  1  2 0.01 0.02       1 2.572235 0.008243908 ## 6  1  3 0.01 0.03       2 2.446786 0.007554560 head(pred2$states) ##    i. j.  t.i  t.j k.ahead        x       var.x ## 3   0  2 0.00 0.02       2 2.714512 0.082054359 ## 6   0  5 0.00 0.05       5 2.336402 0.061046563 ## 9   0  8 0.00 0.08       8 2.010960 0.045483600 ## 14  1  3 0.01 0.03       2 2.446786 0.007554560 ## 17  1  6 0.01 0.06       5 2.105968 0.005855739 ## 20  1  9 0.01 0.09       8 1.812623 0.004597221"},{"path":"/articles/predict.html","id":"set-the-model-parameters-used","dir":"Articles","previous_headings":"","what":"Set the model parameters used","title":"predict: Forecasting the model states and observations.","text":"default predict use initial parameters supplied add_parameters, unless estimate function succesfully run, predict use parameter values found minimizer. can provide parameters using pars argument method .e.","code":"some.other.random.pars = rnorm(length(fit$par.fixed)) pred = obj$predict(.data, pars=some.other.random.pars)"},{"path":"/articles/predict.html","id":"set-the-initial-state-and-covariance","dir":"Articles","previous_headings":"","what":"Set the initial state and covariance","title":"predict: Forecasting the model states and observations.","text":"default behaviour predict use initial state covariance suppled calling set_initial_state method. can important change one wishes correctly predict first observations provided prediction data series. can supply x0 p0 arguments updated state covariance estimates","code":"new.initial.x0 = rnorm(1) new.initial.p0 = rnorm(1)*diag(1) pred = obj$predict(data=.data,                    initial.state = list(                      new.state.value,                      new.covariance.value                    ) )"},{"path":"/articles/predict.html","id":"the-solver-options","dir":"Articles","previous_headings":"","what":"The solver options","title":"predict: Forecasting the model states and observations.","text":"can choose solver options use via arguments ode.solver ode.timestep. ode.solver decides ode solver algorithm used solving mean variance ODEs SDE. ode.timestep determines time step-size using solving ODEs, default value minimum observed time difference provided data time vector (min(diff(.data$t))). time step-size can’t smaller . chosen time step-size \\(\\Delta_{step}\\) “almost” divide observation time differences data \\(\\Delta_{obs}\\) .e. \\[ \\frac{\\Delta_{obs}}{\\Delta_{step}} - \\bigg\\lfloor \\frac{\\Delta_{obs}}{\\Delta_{step}} \\bigg\\rfloor \\geq 0.02 \\] time step-size reduced divide evenly setting \\[ \\frac{\\Delta_{obs}}{\\Delta_{step}} = \\bigg\\lceil \\frac{\\Delta_{obs}}{\\Delta_{step}} \\bigg\\rceil \\] words: takes \\(3.561\\) time-steps get \\(t_{}\\) \\(t_{+1}\\) take \\(4\\) time-steps instead, calculate reduced time-step true. \\(3.01\\) time-steps retain original time-step, ignoring small temporal discrepancy. provide arguments via","code":"obj$predict(.data,             ode.timestep = min(diff(.data$t)) )"},{"path":"/articles/predict.html","id":"use-case","dir":"Articles","previous_headings":"","what":"Use-case","title":"predict: Forecasting the model states and observations.","text":"use model predictions observation compute model performance score e.g. RMSE (root-mean square error). first estimate model parameters, automatically used calling predict. predict 10-steps ahead, return values. Let’s plot 10-step predictions observations. notice 10-step predictions state uncertainty (95%) much larger filtered posterior state estimates fit .e. can calculate RMSE prediction score prediction step follows:","code":"fit = obj$estimate(.data) pred = obj$predict(.data, k.ahead=10) pred.states = pred$states pred.obs = pred$observations # ggplot2 theme library(ggplot2) mytheme =   theme_minimal() +    theme(     text             = element_text(\"Avenir Next Condensed\",size=15),     legend.text      = element_text(size=15),     axis.text        = element_text(size=15),     strip.text       = element_text(face=\"bold\",size=15),     legend.box       = \"vertical\",     legend.position  = \"top\",     plot.title       = element_text(hjust=0.5)   ) pred10 = pred.states[pred.states$k.ahead==10,] data = .data ggplot() +   geom_line(aes(x=pred10$t.j,y=pred10$x,color=\"10-Step Predictions\")) +     geom_ribbon(aes(x=pred10$t.j,ymin=pred10$x-2*sqrt(pred10$var.x),ymax=pred10$x+2*sqrt(pred10$var.x)),fill=\"grey\",alpha=0.5) +   geom_point(aes(x=data$t,data$y,color=\"Observations\")) +   labs(color=\"\",x=\"Time\",y=\"\") +   # coord_cartesian(xlim=c(0,0.1)) +   mytheme t         = fit$states$mean$posterior$t xpost     = fit$states$mean$posterior$x xpost_sd  = fit$states$sd$posterior$x  ggplot() +   geom_line(aes(x=t,y=xpost,color=\"0-Step Predictions (Posterior State Estimates)\"),lwd=1) +   geom_ribbon(aes(x=t,ymin=xpost-2*xpost_sd,ymax=xpost+2*xpost_sd),fill=\"grey\",alpha=0.5) +   geom_point(aes(x=data$t,data$y,color=\"Observations\")) +   labs(x = \"Time\", y = \"\", color=\"\") +   mytheme rmse = c() k.ahead = 1:10 for(i in k.ahead){   xy = data.frame(     x = pred.states[pred.states$k.ahead==i,\"x\"],     y = pred.obs[pred.obs$k.ahead==i,\"y.data\"]   )   rmse[i] = sqrt(mean((xy[[\"x\"]] - xy[[\"y\"]])^2)) }  ggplot() +   geom_line(aes(k.ahead, rmse), color=\"steelblue\") +    geom_point(aes(k.ahead, rmse), color=\"red\") +   labs(     title = \"Root-Mean Square Errors for Different Prediction Horizons\",     x = \"Prediction Steps\",     y = \"Root-Mean-Square Errors\"     ) +   mytheme"},{"path":"/articles/sdeTMB.html","id":"initialising","dir":"Articles","previous_headings":"","what":"Initialising","title":"Getting started","text":"initialise sdeTMB model object using can print object see kind model contains see model called sde_model (default), states, diffusions, observations, inputs parameters currently registered. name used name C++ file created locally, later recognize compiled model object.","code":"library(sdeTMB) obj = sdeTMB$new() print(obj) ## Stochastic State Space Model:                          ## Name         sdeTMB_model ## States                  0 ## Diffusions              0 ## Observations            0 ## Inputs                  0 ## Parameters              0"},{"path":"/articles/sdeTMB.html","id":"add-system-equations","dir":"Articles","previous_headings":"","what":"Add system equations","title":"Getting started","text":"can begin adding desired stochastic differential equation object. note drift term ends *dt diffusions specified dw dw# # can sequence numbers.","code":"obj$add_systems(dX ~ theta * (mu - X) * dt + sigma_x * dw)"},{"path":"/articles/sdeTMB.html","id":"add-observation-equations","dir":"Articles","previous_headings":"","what":"Add observation equations","title":"Getting started","text":"must also add observation equation. observations associated Y data also named Y.","code":"obj$add_observations(Y ~ X)"},{"path":"/articles/sdeTMB.html","id":"add-observation-variances","dir":"Articles","previous_headings":"","what":"Add observation variances","title":"Getting started","text":"every observation variable must also specify variance normally distributed residuals observation equation variable name left-hand side formula must match name previously defined via add_observations, variance associated observation equation. Let’s inspect model object now specified one state \\(X\\) observation \\(Y\\). diffusions count number \\(\\mathrm{d}\\omega_{}\\) terms. single equation can multiple diffusion terms .e. sigma_1 * dw1 + sigma_2*dw2). also note inputs parameter specified yet.","code":"obj$add_observation_variances(Y ~ sigma_y^2*U) print(obj) ## Stochastic State Space Model:                          ## Name         sdeTMB_model ## States                  1 ## Diffusions              1 ## Observations            1 ## Inputs                  0 ## Parameters              0 ##  ## System Equations: ##  ##   dX ~ theta * (mu - X) * dt + sigma_x * dw  ##  ## Observation Equations: ##  ##   Y:  Y ~ X + e   e ~ N(0,?)"},{"path":"/articles/sdeTMB.html","id":"add-inputs","dir":"Articles","previous_headings":"","what":"Add inputs","title":"Getting started","text":"tell model variable names inputs via input values provided data, name, similar observations.","code":"obj$add_inputs(U)"},{"path":"/articles/sdeTMB.html","id":"add-parameters","dir":"Articles","previous_headings":"","what":"Add parameters","title":"Getting started","text":"must also specify (fixed effects) parameters, together initial value lower/upper bound, optimization. can fix parameter value (parameter becomes constant) supplying just single value. usually difficult identify noise parameters \\(\\left(\\sigma_{X},\\sigma_{Y}\\right)\\) practice, lets assume want fix \\(\\sigma_{Y}\\). done via Let’s inspect model object , see inputs parameters (non-fixed fixed) registered.","code":"obj$add_parameters(   theta   = c(initial = 5,    lower = 0,    upper = 20),   mu      = c(initial = 0,    lower = -10,  upper = 10),   sigma_x = c(initial = 1e-1, lower = 1e-5, upper = 5),   sigma_y = c(initial = 1e-1, lower = 1e-5, upper = 5) ) obj$add_parameters(   sigma_y  = 1e-1 ) print(obj) ## Stochastic State Space Model:                          ## Name         sdeTMB_model ## States                  1 ## Diffusions              1 ## Observations            1 ## Inputs                  1 ## Parameters              4 ##  ## System Equations: ##  ##   dX ~ theta * (mu - X) * dt + sigma_x * dw  ##  ## Observation Equations: ##  ##   Y:  Y ~ X + e   e ~ N(0,?)  ##  ##  ## Fixed Parameters: ##   sigma_y"},{"path":"/articles/sdeTMB.html","id":"set-initial-state-and-covariance","dir":"Articles","previous_headings":"","what":"Set initial state and covariance","title":"Getting started","text":"last thing can perform estimation set initial value state(s) associated (co)variance. two inputs adequate since assume normally distributed state. choice value reflect ones belief initial state, often ballpark figure. Note use diag construct 1x1 matrix covariance, required method.","code":"obj$set_initial_state(list(mean=3, cov=1e-1*diag(1)))"},{"path":"/articles/sdeTMB.html","id":"fit-model-parameters-to-data","dir":"Articles","previous_headings":"","what":"Fit model parameters to data","title":"Getting started","text":"now ready perform state filtration parameter estimation. first construct fake data simulating paths Ornstein-Uhlenbeck process using Euler-Maruyama scheme. data must contain time column named t columns specified inputs observations. pass data estimate method. method build compile generated C++ function negative log-likelihood, check supplied data contains necessary variables, construct objective function (computational tree must build automatic differentiation) start optimization. output generated optimization objective (negativ log-likelihood) value parameter values current step. optimizer used package stats::nlminb. optimizer great robustness ability use objective function hessian unlike e.g. ‘stats::optim’","code":"# Choosing parameters set.seed(10) theta=10; mu=1; sigma_x=1; sigma_y=1e-1   # Creating simulation path dt.sim = 1e-3 t.sim = seq(0,1,by=dt.sim) dw = rnorm(length(t.sim)-1,sd=sqrt(dt.sim)) x = 3 for(i in 1:(length(t.sim)-1)) {   x[i+1] = x[i] + theta*(mu-x[i])*dt.sim + sigma_x*dw[i] }  # Extract observations from simulation and add noise dt.obs = 1e-2 t.obs = seq(0,1,by=dt.obs) y = x[t.sim %in% t.obs] + sigma_y * rnorm(length(t.obs))  # Create data.frame data = data.frame(   t = t.obs,   Y = y,   U = c(rep(c(1,2),times=round(length(y)/2)),1) ) fit = obj$estimate(data) ## Building model... ## Compiling C++ likelihood function... ## Note: Using Makevars in /Users/pbrve/.R/Makevars ## using C++ compiler: 'Apple clang version 14.0.3 (clang-1403.0.22.14.1)' ## using SDK: 'MacOSX13.3.sdk' ## Checking data... ## Constructing objective function and derivative tables... ## ...took: 0.007 seconds. ## Minimizing the negative log-likelihood... ##   0:     818.68776:  5.00000  0.00000 0.100000 ##   1:    -24.103906:  4.97527 0.144197  1.08924 ##   2:    -28.328685:  4.90919 0.634803  1.01897 ##   3:    -29.207179:  5.37297 0.821070  1.00446 ##   4:    -29.456330:  6.88456  1.17214 0.993856 ##   5:    -30.458098:  6.57835 0.975504  1.01495 ##   6:    -31.234909:  7.32661 0.961485  1.03777 ##   7:    -33.289229:  10.3202  1.00995  1.11343 ##   8:    -34.206473:  13.9863  1.11028  1.19968 ##   9:    -34.404517:  15.1360  1.04697  1.24056 ##  10:    -34.445598:  15.3060  1.07129  1.24149 ##  11:    -34.446681:  15.4313  1.07217  1.24460 ##  12:    -34.447225:  15.4899  1.07227  1.24584 ##  13:    -34.448679:  15.5925  1.07247  1.24735 ##  14:    -34.452034:  15.7461  1.07274  1.24803 ##  15:    -34.459028:  15.9476  1.07305  1.24525 ##  16:    -34.469519:  16.0951  1.07318  1.23518 ##  17:    -34.478453:  16.0313  1.07286  1.22001 ##  18:    -34.481612:  15.8386  1.07235  1.21104 ##  19:    -34.481942:  15.7524  1.07216  1.21018 ##  20:    -34.481951:  15.7436  1.07215  1.21053 ##  21:    -34.481951:  15.7437  1.07215  1.21057 ##  22:    -34.481951:  15.7438  1.07215  1.21057 ##   Optimization finished!: ##             Elapsed time: 0.005 seconds. ##             The objective value is: -3.448195e+01 ##             The maximum gradient component is: 1e-06 ##             The convergence message is: relative convergence (4) ##             Iterations: 22 ##             Evaluations: Fun: 24 Grad: 23 ##             See stats::nlminb for available tolerance/control arguments. ## Returning results... ## Finished!"},{"path":"/articles/sdeTMB.html","id":"important-note-for-model-changes","dir":"Articles","previous_headings":"","what":"Important Note for Model Changes","title":"Getting started","text":"change model later stage retain model name, need recompile C++ objective function. can like : receive error messages calling estimate regarding variables specified model, likely forgot recompile.","code":"obj$estimate(data, compile=TRUE)"},{"path":"/articles/sdeTMB.html","id":"parameter-estimates","dir":"Articles","previous_headings":"","what":"Parameter estimates","title":"Getting started","text":"Let’s inspect results estimation. can print fit object see standard coefficient matrix parameter estimates. can see parameter estimate associated standard error together t-test statistic P-value associated standard null-hypothesis \\[ H_{0}: p = 0 \\\\ H_{1}: p \\neq 0 \\] Note true parameter values set simulation step \\(\\theta = 10\\), \\(\\mu=1\\) \\(\\sigma_{X} = 1\\). parameter values, standard deviations covariance matrix can extracted via: estimated (fixed) parameters: standard deviations (fixed) parameters: covariance (fixed) parameters:","code":"print(fit) ## Coefficent Matrix  ##          Estimate Std. Error t value  Pr(>|t|)     ## theta   15.743756   3.806401  4.1361 7.366e-05 *** ## mu       1.072147   0.081688 13.1249 < 2.2e-16 *** ## sigma_x  1.210571   0.160547  7.5403 2.183e-11 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 fit$par.fixed ##     theta        mu   sigma_x  ## 15.743756  1.072147  1.210571 fit$sd.fixed ##      theta         mu    sigma_x  ## 3.80640122 0.08168822 0.16054743 fit$cov.fixed ##              theta          mu     sigma_x ## theta   14.4886902 0.085360603 0.210293731 ## mu       0.0853606 0.006672965 0.001238231 ## sigma_x  0.2102937 0.001238231 0.025775476"},{"path":"/articles/sdeTMB.html","id":"state-estimates","dir":"Articles","previous_headings":"","what":"State estimates","title":"Getting started","text":"can also plot prior posterior state estimates prior state estimate resulting estimate purely integrating mean covariance SDE system forward time, posterior state estimation obtained updating prior estimate information contained observation (using Bayes’ rule).","code":"library(ggplot2) library(patchwork) # ggplot2 theme mytheme =   theme_minimal() +    theme(     text             = element_text(\"Avenir Next Condensed\",size=15),     legend.text      = element_text(size=15),     axis.text        = element_text(size=15),     strip.text       = element_text(face=\"bold\",size=15),     panel.grid.major = element_blank(),     panel.grid.minor = element_blank(),     legend.box       = \"vertical\",     legend.position  = \"top\",     plot.title       = element_text(hjust=0.5)   ) t         = fit$states$mean$posterior$t xprior    = fit$states$mean$prior$X xpost     = fit$states$mean$posterior$X xpost_sd  = fit$states$sd$posterior$X  ggplot() +   geom_line(aes(x=t,y=xpost,color=\"State Estimates (Posterior)\"),lwd=1) +   geom_line(aes(x=t,y=xprior,color=\"State Estimates (Prior)\"),lwd=1) +   geom_ribbon(aes(x=t,ymin=xpost-2*xpost_sd,ymax=xpost+2*xpost_sd),fill=\"grey\",alpha=0.5) +   geom_point(aes(x=data$t,data$Y,color=\"Observations\")) +   guides(color=guide_legend(override.aes=list(shape=c(16,NA,NA),size=c(2,NA,NA),linetype=c(NA,1,1),lwd=c(NA,1,1)))) +   labs(x = \"Time\", y = \"\", color=\"\") +   mytheme"},{"path":"/articles/sdeTMB.html","id":"residual-analysis","dir":"Articles","previous_headings":"","what":"Residual analysis","title":"Getting started","text":"can display standard residual analysis observations calling plot fit object, invokes S3 plot.sdeTMB.fit method plot. includes quantile-quantile plot, histogram, auto-correlations cumulative periodogram. residuals (standard normalized) can extracted well, together standard deviation covariance matrix via fit$residuals","code":"plot(fit)"},{"path":"/articles/sdeTMB.html","id":"extra-adding-algebraic-equations","dir":"Articles","previous_headings":"","what":"Extra: Adding algebraic equations","title":"Getting started","text":"sake clarity can sometimes easier specify simple variables equations place (perhaps larger) expression. can redefine variable name providing algebraic relation. Let’s say wish consider positive values parameter \\(\\theta\\), appropriate estimate log-domain (since domain logarithm positive real axis). use \\(\\theta = \\exp\\left(\\log\\theta\\right)\\) introduce parameter logtheta replace theta. obviously just names, might well written exp(theta) directly specifying system equations, calling parameter logtheta reminds one really interested exponential parameter. specify algebraic relation like : parameter settings theta automatically transformed logtheta, must redefined:","code":"obj$add_algebraics(theta ~ exp(logtheta)) obj$add_parameters(logtheta = log(c(initial=5, lower=0, upper=20)))"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Phillip Vetter. Author, maintainer. Jan Møller. Contributor. Uffe Thygesen. Contributor. Peder Bacher. Contributor. Henrik Madsen. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Vetter P (2024). sdeTMB: Stochastic Differential Equations using Template Model Builder. R package version 0.5, https://github.com/phillipbvetter/sdeTMB.","code":"@Manual{,   title = {sdeTMB: Stochastic Differential Equations using Template Model Builder},   author = {Phillip Vetter},   year = {2024},   note = {R package version 0.5},   url = {https://github.com/phillipbvetter/sdeTMB}, }"},{"path":"/index.html","id":"stochastic-differential-equations-using-template-model-builder-sdetmb","dir":"","previous_headings":"","what":"Stochastic Differential Equations using Template Model Builder","title":"Stochastic Differential Equations using Template Model Builder","text":"sdeTMB R package parameter estimation, state filtration forecasting stochastic state space models, heavily inspired Continuous Time Stochastic Modelling. package user-friendly wrapper Template Model Builder frees user writing required C++ file containing (negative log) likelihood function . Instead, C++ script generated automatically based model specified user using provided R6 sdeTMB class object. package furthermore employs Rcpp package universe allow faster calculations model predictions stochastic simulation paths. package implements following methods (Continous-Discrete) Extended Kalman Filter, ekf (Continous-Discrete) Unscented Kalman Filter, ukf Laplace-style approach latent states considered random effects (see e.g. example), laplace main advantage Kalman Filter implementations large increase computation speed, access fixed effects hessian improved convergence optimization. cases TMB just provides automatic differentiation. district advantage laplace-style implementation use Laplace approximation likelihood calculations allows state space formulations density observation residuals non-Gaussian. package currently mostly tailored towards Kalman Filter, available methods predict simulate k-step-ahead predictions simulations. also S3 method implementation plot called sdeTMB.fit class object returned estimate method, plots basic residuals analysis using ggplot2 package.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Stochastic Differential Equations using Template Model Builder","text":"can install package copying command R. note sdeTMB depends following packages: 1. TMB 2. Rcpp 3. RcppEigen 4. RcppXPtrUtils 5. RcppZiggurat 6. R6 7. Deriv 8. stringr 9. stats user must therefore working C++ compiler. particular windows users install Rtools, Mac users install Command Line Tools get working C++ compilers. must make sure added PATH vislble R. information see TMB GitHub associated installation instructions Linux users need make sure GSL installed RcppZiggurat. can try following command, google .","code":"remotes::install_github(repo=\"phillipbvetter/sdeTMB\", dependencies=TRUE) sudo apt-get install libgsl-dev"},{"path":"/index.html","id":"how-to-get-started","dir":"","previous_headings":"","what":"How to get started","title":"Stochastic Differential Equations using Template Model Builder","text":"can visit package webpage browse vignettes example uses, particular see Getting Started.","code":""},{"path":"/index.html","id":"help","dir":"","previous_headings":"","what":"Help","title":"Stochastic Differential Equations using Template Model Builder","text":"can access documentation available methods individual methods can’t accessed directly .e. ?sdeTMB::estimate similar work. methods documentation also available homepage.","code":"?sdeTMB"},{"path":"/index.html","id":"example-usage","dir":"","previous_headings":"","what":"Example Usage","title":"Stochastic Differential Equations using Template Model Builder","text":"","code":"library(ggplot2) library(patchwork) library(dplyr) library(reshape2) library(sdeTMB)  ############################################################ # Data simulation ############################################################  # Simulate data using Euler Maruyama set.seed(20) pars = c(theta=10, mu=1, sigma_x=1, sigma_y=0.1) #  dt.sim = 1e-3 t.sim = seq(0,5,by=dt.sim) dw = rnorm(length(t.sim)-1,sd=sqrt(dt.sim)) u.sim = cumsum(rnorm(length(t.sim),sd=0.05)) x = 3 for(i in 1:(length(t.sim)-1)) {   x[i+1] = x[i] + pars[1]*(pars[2]-x[i]+u.sim[i])*dt.sim + pars[3]*dw[i] }  # Extract observations and add noise dt.obs = 1e-1 ids = seq(1,length(t.sim),by=round(dt.obs / dt.sim)) t.obs = t.sim[ids] y = x[ids] + pars[4] * rnorm(length(t.obs)) # forcing input u = u.sim[ids]  # Create data .data = data.frame(   t = t.obs,   y = y,   u = u )  ############################################################ # Model creation and estimation ############################################################  # Create model object obj = sdeTMB$new()  # Set name of model (and the created .cpp file) obj$set_modelname(\"ornstein_uhlenbeck\")  # Add system equations obj$add_systems(   dx ~ theta * (mu-x+u) * dt + sigma_x*dw )  # Add observation equations obj$add_observations(   y ~ x )  # Set observation equation variances obj$add_observation_variances(   y ~ sigma_y^2 )  # Specify algebraic relations obj$add_algebraics(   theta   ~ exp(logtheta),   sigma_x ~ exp(logsigma_x),   sigma_y ~ exp(logsigma_y) )  # Add vector input obj$add_inputs(u)  # Specify parameter initial values and lower/upper bounds in estimation obj$add_parameters(   logtheta    = log(c(initial = 1, lower=1e-5, upper=50)),   mu          = c(initial=1.5, lower=0, upper=5),   logsigma_x  = log(c(initial=1, lower=1e-10, upper=30)),   logsigma_y  = log(c(initial=1e-1, lower=1e-10, upper=30)) )  # Set initial state mean and covariance obj$set_initial_state(list(x[1], 1e-1*diag(1)))  # Carry out estimation using extended kalman filter method with stats::nlminb as optimizer fit <- obj$estimate(data=.data,                      method=\"ekf\",                      use.hessian=T,                     ode.timestep=1e-2 )  # Check parameter estimates against truth p0 = fit$par.fixed cbind(c(exp(p0[1]),p0[2],exp(p0[3]),exp(p0[4])), pars)  # Create plot of one-step predictions, simulated states and observations t.est = fit$states$mean$prior$t x.mean = fit$states$mean$prior$x x.sd = fit$states$sd$prior$x plot1 = ggplot() +   geom_ribbon(aes(x=t.est, ymin=x.mean-2*x.sd, ymax=x.mean+2*x.sd),fill=\"grey\", alpha=0.9) +   geom_line(aes(x=t.est, x.mean),col=\"steelblue\",lwd=1) +   geom_line(aes(x=t.sim,y=x)) +    geom_point(aes(x=t.obs,y=y),col=\"tomato\",size=1) +   labs(title=\"1-Step State Estimates vs Observations\", x=\"Time\", y=\"\") +   theme_minimal()  # Predict to obtain k-step-ahead predictions to see model forecasting ability pred.list = obj$predict(data=.data,                          k.ahead=10,                          method=\"ekf\", )  # Create plot all 10-step predictions against data pred = pred.list$states pred10step = pred %>% dplyr::filter(k.ahead==10) plot2 = ggplot() +   geom_ribbon(aes(x=pred10step$t.j,                    ymin=pred10step$x-2*sqrt(pred10step$var.x),                   ymax=pred10step$x+2*sqrt(pred10step$var.x)),fill=\"grey\", alpha=0.9) +   geom_line(aes(x=pred10step$t.j,pred10step$x),color=\"steelblue\",lwd=1) +   geom_point(aes(x=t.obs,y=y),color=\"tomato\",size=1) +   labs(title=\"10 Step Predictions vs Observations\", x=\"Time\", y=\"\") +   theme_minimal()  # Perform full prediction without data update pred.list = obj$predict(data=.data,                          k.ahead=1e6,                          method=\"ekf\", )  # Perform full simulation without data update sim.list = obj$simulate(data=.data,                          k.ahead=1e6,                          method=\"ekf\" )  # Collapse simulation data for easy use with ggplot  sim.df = sim.list$states$x$i0 %>%   select(!c(\"i\",\"j\",\"t.i\",\"k.ahead\")) %>%   reshape2::melt(., id.var=\"t.j\")  # Plot all full simulations and the full prediction against observations # (full means no data-update at all) plot3 = ggplot() +   geom_line(data=sim.df, aes(x=t.j, y=value, group=variable),color=\"grey\") +   geom_line(aes(x=pred.list$states$t.j,y=pred.list$states$x),color=\"steelblue\") +   geom_point(aes(x=t.obs,y=y),color=\"tomato\",size=1) +   labs(title=\"No Update Prediction and Simulations vs Observations\", x=\"Time\", y=\"\") +   theme_minimal() + theme(legend.position = \"none\")  # Draw both plots patchwork::wrap_plots(plot1, plot2, plot3, ncol=1)  # Plot one-step-ahead residual analysis using the command below # plot(fit)"},{"path":"/reference/add_algebraics.html","id":null,"dir":"Reference","previous_headings":"","what":"Add algebraic relationships to the model object. — add_algebraics","title":"Add algebraic relationships to the model object. — add_algebraics","text":"Algebraic relations convenient way transform parameters equations, reduce clutter specying various equations, instance ensure positivity (log-transform).","code":""},{"path":"/reference/add_algebraics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add algebraic relationships to the model object. — add_algebraics","text":"","code":"add_algebraics(form,                ...)"},{"path":"/reference/add_algebraics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add algebraic relationships to the model object. — add_algebraics","text":"form formula specifying algebraic relation. ... formulas similar form, used allow specifying multiple formulas comma-seperation rather providing list.","code":""},{"path":"/reference/add_algebraics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add algebraic relationships to the model object. — add_algebraics","text":"left-hand side provided formula specifies parameter overwritten expression right-hand side. also means left-hand side parameter vanish model formulation link{add_parameters} therefore specify values new parameters.","code":""},{"path":"/reference/add_algebraics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add algebraic relationships to the model object. — add_algebraics","text":"","code":"# Example 1 add_algebraics( sigma ~ exp(logsigma), theta ~ invlogit(alpha + beta) ) #> Error in add_algebraics(sigma ~ exp(logsigma), theta ~ invlogit(alpha +     beta)): could not find function \"add_algebraics\""},{"path":"/reference/add_inputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify input variables in the model object. — add_inputs","title":"Specify input variables in the model object. — add_inputs","text":"Declare whether variable contained system, observation observation variance equations input variable.","code":""},{"path":"/reference/add_inputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify input variables in the model object. — add_inputs","text":"","code":"add_inputs(...)"},{"path":"/reference/add_inputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify input variables in the model object. — add_inputs","text":"... series variable names (unquouted) match variable names defined system treated input variables.","code":""},{"path":"/reference/add_inputs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify input variables in the model object. — add_inputs","text":"","code":"# Example 1 add_inputs(u) #> Error in add_inputs(u): could not find function \"add_inputs\"  # Example 2 add_inputs(u1, u2, u3) #> Error in add_inputs(u1, u2, u3): could not find function \"add_inputs\""},{"path":"/reference/add_observation_variances.html","id":null,"dir":"Reference","previous_headings":"","what":"Add observation variances to the model object. — add_observation_variances","title":"Add observation variances to the model object. — add_observation_variances","text":"Specify observation variance existing observation equation.","code":""},{"path":"/reference/add_observation_variances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add observation variances to the model object. — add_observation_variances","text":"","code":"add_observation_variances(form,                           ...)"},{"path":"/reference/add_observation_variances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add observation variances to the model object. — add_observation_variances","text":"form formula class specifying obsevation equation added system. ... formulas similar form, used allow specifying multiple formulas comma-seperation rather providing list.","code":""},{"path":[]},{"path":"/reference/add_observations.html","id":null,"dir":"Reference","previous_headings":"","what":"Add observation equations to model object — add_observations","title":"Add observation equations to model object — add_observations","text":"Add observation equation sdeTMB model-object links states observed variable.","code":""},{"path":"/reference/add_observations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add observation equations to model object — add_observations","text":"","code":"add_observations(form,                  ...,                  obsnames=NULL)"},{"path":"/reference/add_observations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add observation equations to model object — add_observations","text":"form formula specifying observation equation added system. ... formulas similar form, used allow specifying multiple formulas comma-seperation rather providing list. obsnames character vector specifying observation names used observation left-hand side function call. See details.","code":""},{"path":[]},{"path":"/reference/add_observations.html","id":"obsnames","dir":"Reference","previous_headings":"","what":"obsnames","title":"Add observation equations to model object — add_observations","text":"obsnames argument used left-hand side form function variable .e. log(y) (class 'call' instead 'name'), Example 3. user provide data y, log-transformation handled internally. supported functions discussed add_systems.","code":""},{"path":[]},{"path":"/reference/add_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify parameters in the model object — add_parameters","title":"Specify parameters in the model object — add_parameters","text":"Declare variables (fixed effects) parameters specified model, specify initial optimizer values, well lower / upper bounds. Parameters can declared either vectors matrices. first entry initial value, second entry lower bound third entry upper bound. Providing first entry fixes particular parameter value.","code":""},{"path":"/reference/add_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify parameters in the model object — add_parameters","text":"","code":"add_parameters(...)"},{"path":"/reference/add_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify parameters in the model object — add_parameters","text":"... comma-seperated series vectors/matrix entries","code":""},{"path":[]},{"path":"/reference/add_systems.html","id":null,"dir":"Reference","previous_headings":"","what":"Add state equations to model object — add_systems","title":"Add state equations to model object — add_systems","text":"Add stochastic differential equation sdeTMB model-object governs differential evolution states specified model.","code":""},{"path":"/reference/add_systems.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add state equations to model object — add_systems","text":"","code":"add_systems(form,             ...)"},{"path":"/reference/add_systems.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add state equations to model object — add_systems","text":"form formula specifying stochastic differential equation added system. ... formulas similar form, used allow specifying multiple formulas comma-seperation rather providing list.","code":""},{"path":[]},{"path":"/reference/add_systems.html","id":"usable-functions","dir":"Reference","previous_headings":"","what":"Usable functions","title":"Add state equations to model object — add_systems","text":"formulas can contain elementary functions log, exp, logit invlogit. general supported functions 1) defined derivative table Deriv package, 2) undestood TMB C++ side.","code":""},{"path":"/reference/add_systems.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add state equations to model object — add_systems","text":"","code":"# Example 1 - Linear System add_systems(dx ~ theta * (mu - x + u) * dt + sigma * dw) #> Error in add_systems(dx ~ theta * (mu - x + u) * dt + sigma * dw): could not find function \"add_systems\"  # Example 2 - Non-Linear System add_systems(dx ~ theta * (mu - exp(x)^2 + u) * dt + sigma * x * (1-x) * dw) #> Error in add_systems(dx ~ theta * (mu - exp(x)^2 + u) * dt + sigma * x *     (1 - x) * dw): could not find function \"add_systems\""},{"path":"/reference/execute_ekf_prediction.html","id":null,"dir":"Reference","previous_headings":"","what":"export — execute_ekf_prediction","title":"export — execute_ekf_prediction","text":"export","code":""},{"path":"/reference/execute_ekf_prediction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"export — execute_ekf_prediction","text":"","code":"execute_ekf_prediction(   f__R,   g__R,   dfdx__R,   h__R,   dhdx__R,   hvar__R,   obsMat,   inputMat,   parVec,   covMat,   stateVec,   ode_timestep_size,   ode_timesteps,   bool_is_not_na_obsMat,   number_of_available_obs,   n,   m,   last_pred_id,   k_step_ahead,   ode_solver )"},{"path":"/reference/execute_ekf_simulation.html","id":null,"dir":"Reference","previous_headings":"","what":"export — execute_ekf_simulation","title":"export — execute_ekf_simulation","text":"export","code":""},{"path":"/reference/execute_ekf_simulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"export — execute_ekf_simulation","text":"","code":"execute_ekf_simulation(   f__R,   g__R,   dfdx__R,   h__R,   dhdx__R,   hvar__R,   obsMat,   inputMat,   parVec,   covMat,   stateVec,   ode_timestep_size,   ode_timesteps,   simulation_timestep_size,   simulation_timesteps,   bool_is_not_na_obsMat,   number_of_available_obs,   n,   m,   ng,   last_pred_id,   k_step_ahead,   ode_solver,   nsims )"},{"path":"/reference/plot.sdeTMB.fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic summary of objects of class 'sdeTMB' — plot.sdeTMB.fit","title":"Basic summary of objects of class 'sdeTMB' — plot.sdeTMB.fit","text":"Basic summary objects class 'sdeTMB'","code":""},{"path":"/reference/plot.sdeTMB.fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic summary of objects of class 'sdeTMB' — plot.sdeTMB.fit","text":"","code":"# S3 method for sdeTMB.fit plot(   fit,   plot.obs = 1,   pacf = FALSE,   extended = FALSE,   ggtheme = getggplot2theme() )"},{"path":"/reference/plot.sdeTMB.fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic summary of objects of class 'sdeTMB' — plot.sdeTMB.fit","text":"plot.obs vector indicate observations plotted . multiple chosen list plots observation returned. pacf logical indicate whether partial autocorrelations returned. default FALSE case histogram returned instead. extended logical. TRUE additional information printed ggtheme ggplot2 theme use creating ggplot.","code":""},{"path":"/reference/plot.sdeTMB.fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Basic summary of objects of class 'sdeTMB' — plot.sdeTMB.fit","text":"list plots","code":""},{"path":"/reference/plot.sdeTMB.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic summary of objects of class 'sdeTMB' — plot.sdeTMB","title":"Basic summary of objects of class 'sdeTMB' — plot.sdeTMB","text":"Basic summary objects class 'sdeTMB'","code":""},{"path":"/reference/plot.sdeTMB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic summary of objects of class 'sdeTMB' — plot.sdeTMB","text":"","code":"# S3 method for sdeTMB plot(   object,   plot.obs = 1,   pacf = FALSE,   extended = FALSE,   ggtheme = getggplot2theme() )"},{"path":"/reference/plot.sdeTMB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic summary of objects of class 'sdeTMB' — plot.sdeTMB","text":"plot.obs vector indicate observations plotted . multiple chosen list plots observation returned. pacf logical indicate whether partial autocorrelations returned. default FALSE case histogram returned instead. extended logical. TRUE additional information printed ggtheme ggplot2 theme use creating ggplot.","code":""},{"path":"/reference/plot.sdeTMB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Basic summary of objects of class 'sdeTMB' — plot.sdeTMB","text":"huge amount information","code":""},{"path":"/reference/plot.sdeTMB.pred.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic summary of objects of class 'sdeTMB.pred' from predict — plot.sdeTMB.pred","title":"Basic summary of objects of class 'sdeTMB.pred' from predict — plot.sdeTMB.pred","text":"Basic summary objects class 'sdeTMB.pred' predict","code":""},{"path":"/reference/plot.sdeTMB.pred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic summary of objects of class 'sdeTMB.pred' from predict — plot.sdeTMB.pred","text":"","code":"# S3 method for sdeTMB.pred plot(pred.data, n.ahead = 0, state.name = NULL, ...)"},{"path":"/reference/plot.sdeTMB.pred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Basic summary of objects of class 'sdeTMB.pred' from predict — plot.sdeTMB.pred","text":"huge amount information","code":""},{"path":"/reference/print.sdeTMB.fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic print of objects of class 'sdeTMB' — print.sdeTMB.fit","title":"Basic print of objects of class 'sdeTMB' — print.sdeTMB.fit","text":"Basic print objects class 'sdeTMB'","code":""},{"path":"/reference/print.sdeTMB.fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic print of objects of class 'sdeTMB' — print.sdeTMB.fit","text":"","code":"# S3 method for sdeTMB.fit print(fit)"},{"path":"/reference/print.sdeTMB.fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Basic print of objects of class 'sdeTMB' — print.sdeTMB.fit","text":"huge amount information","code":""},{"path":"/reference/print.sdeTMB.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic print of objects of class 'sdeTMB' — print.sdeTMB","title":"Basic print of objects of class 'sdeTMB' — print.sdeTMB","text":"Basic print objects class 'sdeTMB'","code":""},{"path":"/reference/print.sdeTMB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic print of objects of class 'sdeTMB' — print.sdeTMB","text":"","code":"# S3 method for sdeTMB print(object, ...)"},{"path":"/reference/print.sdeTMB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Basic print of objects of class 'sdeTMB' — print.sdeTMB","text":"huge amount information","code":""},{"path":"/reference/sdeTMB.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for the 'sdeTMB' R6 class — sdeTMB","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"following public methods used construct stochastic state space model system, consisting set stochastic differential equations (SDEs), one algebraic observation equations (AOEs). AOEs used infer information value (latent) states governed SDEs, thus must functions least one state.","code":""},{"path":"/reference/sdeTMB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"function returns object class R6 sdeTMB, can used define stochastic state space system.","code":""},{"path":[]},{"path":"/reference/sdeTMB.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"sdeTMB$new() sdeTMB$add_systems() sdeTMB$add_observations() sdeTMB$add_observation_variances() sdeTMB$add_inputs() sdeTMB$add_parameters() sdeTMB$add_algebraics() sdeTMB$set_initial_state() sdeTMB$set_lamperti() sdeTMB$set_modelname() sdeTMB$set_cppfile_directory() sdeTMB$set_map() sdeTMB$get_systems() sdeTMB$get_observations() sdeTMB$get_observation_variances() sdeTMB$get_algebraics() sdeTMB$get_initial_state() sdeTMB$get_parameters() sdeTMB$construct_nll() sdeTMB$estimate() sdeTMB$simulate() sdeTMB$predict() sdeTMB$print() sdeTMB$summary() sdeTMB$plot() sdeTMB$clone()","code":""},{"path":"/reference/sdeTMB.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"Initialize private fields","code":""},{"path":"/reference/sdeTMB.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"","code":"sdeTMB$new()"},{"path":"/reference/sdeTMB.html","id":"method-add-systems-","dir":"Reference","previous_headings":"","what":"Method add_systems()","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"Define add multiple stochastic differential equation governing process individual state variables form d<state> ~ f(t,<states>,<inputs>) * dt + g1(t,<states>,<inputs>) * dw1  + g2(t,<states>,<inputs>) * dw2 + ... + gN(t,<states>,<inputs>) * dwN f drift, g1, g2, ..., gN diffusions, differential brownian motions dw1, dw2, ..., dwN.","code":""},{"path":"/reference/sdeTMB.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"","code":"sdeTMB$add_systems(form, ...)"},{"path":"/reference/sdeTMB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"form formula specifying stochastic differential equation added system. ... additional formulas similar form specifying multiple equations .","code":""},{"path":"/reference/sdeTMB.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"","code":"# Specify Ornstein-Uhlenbeck Process add_systems(dx ~ theta * (mu - x + u) * dt + sigma * dw)"},{"path":"/reference/sdeTMB.html","id":"method-add-observations-","dir":"Reference","previous_headings":"","what":"Method add_observations()","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"Define add relationship observed variable system states. observation equation takes form <observation> ~ h(t,<states>,<inputs>) + e) h observation function, e normally distributed noise zero mean variance specified. observation variable present data provided calling estimate(.data) parameter estimation.","code":""},{"path":"/reference/sdeTMB.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"","code":"sdeTMB$add_observations(form, ..., obsnames = NULL)"},{"path":"/reference/sdeTMB.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"form formula class specifying obsevation equation added system. ... additional formulas identical form specify multiple observation equations time. obsnames character vector specifying name observation. observation left-hand side consists just single variable name (class 'call' instead 'name') given name form obs__# # number, unless obsnames provided.","code":""},{"path":"/reference/sdeTMB.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"","code":"#Specify observation directly as a latent state add_observations(y ~ x)  Specify observation as the sum of exponentials of two latent states add_observations(y ~ exp(x1) + exp(x2))"},{"path":"/reference/sdeTMB.html","id":"method-add-observation-variances-","dir":"Reference","previous_headings":"","what":"Method add_observation_variances()","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"Specify variance observation equation. defined observation variable y e.g. add_observations(y ~  h(t,<states>,<inputs>) pertubed Gaussian noise zero mean variance -specified using add_observation_variances(y ~ p(t,<states>,<inputs>). can instance declare add_observation_variances(y ~ sigma_x^2 sigma_x fixed effect parameter declared add_parameters.","code":""},{"path":"/reference/sdeTMB.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"","code":"sdeTMB$add_observation_variances(form, ...)"},{"path":"/reference/sdeTMB.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"form formula class specifying obsevation equation added system. ... additional formulas identical form specify multiple observation equations time.","code":""},{"path":"/reference/sdeTMB.html","id":"method-add-inputs-","dir":"Reference","previous_headings":"","what":"Method add_inputs()","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"Declare variables data inputs Declare whether variable contained system, observation observation variance equations input variable. e.g. system equation contains input variable u declared using add_inputs(u). input u must contained data.frame .data provided calling estimate predict methods.","code":""},{"path":"/reference/sdeTMB.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"","code":"sdeTMB$add_inputs(...)"},{"path":"/reference/sdeTMB.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"... variable names specifies name input variables defined system.","code":""},{"path":"/reference/sdeTMB.html","id":"method-add-parameters-","dir":"Reference","previous_headings":"","what":"Method add_parameters()","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"Declare variables (fixed effects) parameters specified model, specify initial optimizer value, well lower / upper bounds optimization. two ways declare parameters: can declare parameters using formulas .e. add_parameters(  theta = c(1,0,10), mu = c(0,-10,10) ). first value initial value optimizer, second value lower optimization bound third value upper optimization bound. can provide 3-column matrix rows corresponds different parameters, parameter names provided rownames matrix. columns values corresponds description vector format .","code":""},{"path":"/reference/sdeTMB.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"","code":"sdeTMB$add_parameters(...)"},{"path":"/reference/sdeTMB.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"... named vector matrix described .","code":""},{"path":"/reference/sdeTMB.html","id":"method-add-algebraics-","dir":"Reference","previous_headings":"","what":"Method add_algebraics()","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"Add algebraic relations. Algebraic relations convenient way transform parameters equations. Ornstein-Uhlenbeck process rate parameter theta always positive, estimation log-domain good idea. Instead writing exp(theta) directly system equation one can transform log domain using algebraic relation add_algebraics(theta ~ exp(logtheta)). instances theta replaced exp(logtheta) compiling C++ function. Note must provide values logtheta now instead theta declaring parameters add_parameters","code":""},{"path":"/reference/sdeTMB.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"","code":"sdeTMB$add_algebraics(form, ...)"},{"path":"/reference/sdeTMB.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"form formula specifying stochastic differential equation(s) added system. ... additional formulas similar form specifying multiple equations .","code":""},{"path":"/reference/sdeTMB.html","id":"method-set-initial-state-","dir":"Reference","previous_headings":"","what":"Method set_initial_state()","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"Declare initial state values .e. mean covariance system states.","code":""},{"path":"/reference/sdeTMB.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"","code":"sdeTMB$set_initial_state(initial.state, estimate = FALSE)"},{"path":"/reference/sdeTMB.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"initial.state named list two entries 'x0' 'p0' containing initial state covariance state estimate boolean value indicates whether initial conditions shall estimated fixed effects parameters. provided mean covariance used initial guesses","code":""},{"path":"/reference/sdeTMB.html","id":"method-set-lamperti-","dir":"Reference","previous_headings":"","what":"Method set_lamperti()","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"Set Lamperti Transformation provided system equations state dependent diffusion available ways advantageous perform transformation remove state dependence. comes cost complicated drift function. following types state-dependence currently supported 'identity' - diffusion state-independent (default) 'log' - diffusion proportional x * dw 'logit' - diffusion proportional x * (1-x) * dw 'sqrt-logit' - diffusion proportional sqrt(x * (1-x)) * dw","code":""},{"path":"/reference/sdeTMB.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"","code":"sdeTMB$set_lamperti(transforms, states = NULL)"},{"path":"/reference/sdeTMB.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"transforms character vector - one either \"identity, \"log\", \"logit\", \"sqrt-logit\" states vector state names specified transformations applied .","code":""},{"path":"/reference/sdeTMB.html","id":"method-set-modelname-","dir":"Reference","previous_headings":"","what":"Method set_modelname()","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"Set modelname used create C++ file TMB calling TMB::MakeADFun (negative log) likelihood function created directory specified set_cppfile_directory method name <modelname>.cpp","code":""},{"path":"/reference/sdeTMB.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"","code":"sdeTMB$set_modelname(name)"},{"path":"/reference/sdeTMB.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"name string defining model name.","code":""},{"path":"/reference/sdeTMB.html","id":"method-set-cppfile-directory-","dir":"Reference","previous_headings":"","what":"Method set_cppfile_directory()","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"Set path directory constructed C++ file created. specify entire path, unless want construct subfolder current working directory - can call e.g. set_cppfile_directory(\"folder_in_current_wd\").","code":""},{"path":"/reference/sdeTMB.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"","code":"sdeTMB$set_cppfile_directory(directory)"},{"path":"/reference/sdeTMB.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"directory string specifying local directory","code":""},{"path":"/reference/sdeTMB.html","id":"method-set-map-","dir":"Reference","previous_headings":"","what":"Method set_map()","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"Enable maximum posterior (MAP) estimation. Adds maximum posterior contribution (negative log) likelihood function evaluating fixed effects parameters multivariate Gaussian mean covariance provided.","code":""},{"path":"/reference/sdeTMB.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"","code":"sdeTMB$set_map(mean, cov)"},{"path":"/reference/sdeTMB.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"mean mean vector Gaussian prior parameter distribution cov covariance matrix Gaussian prior parameter distribution","code":""},{"path":"/reference/sdeTMB.html","id":"method-get-systems-","dir":"Reference","previous_headings":"","what":"Method get_systems()","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"Retrieve system equations.","code":""},{"path":"/reference/sdeTMB.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"","code":"sdeTMB$get_systems()"},{"path":"/reference/sdeTMB.html","id":"method-get-observations-","dir":"Reference","previous_headings":"","what":"Method get_observations()","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"Retrieve observation equations.","code":""},{"path":"/reference/sdeTMB.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"","code":"sdeTMB$get_observations()"},{"path":"/reference/sdeTMB.html","id":"method-get-observation-variances-","dir":"Reference","previous_headings":"","what":"Method get_observation_variances()","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"Retrieve observation variances","code":""},{"path":"/reference/sdeTMB.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"","code":"sdeTMB$get_observation_variances()"},{"path":"/reference/sdeTMB.html","id":"method-get-algebraics-","dir":"Reference","previous_headings":"","what":"Method get_algebraics()","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"Retrieve algebraic relations","code":""},{"path":"/reference/sdeTMB.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"","code":"sdeTMB$get_algebraics()"},{"path":"/reference/sdeTMB.html","id":"method-get-initial-state-","dir":"Reference","previous_headings":"","what":"Method get_initial_state()","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"Retrieve initially set state covariance","code":""},{"path":"/reference/sdeTMB.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"","code":"sdeTMB$get_initial_state()"},{"path":"/reference/sdeTMB.html","id":"method-get-parameters-","dir":"Reference","previous_headings":"","what":"Method get_parameters()","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"Get initial (estimated) parameters.","code":""},{"path":"/reference/sdeTMB.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"","code":"sdeTMB$get_parameters(type = \"all\", value = \"all\")"},{"path":"/reference/sdeTMB.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"type one \"\", free\" \"fixed\" parameters. value one \"\", initial\", \"estimate\", \"lower\" \"upper\"","code":""},{"path":"/reference/sdeTMB.html","id":"method-construct-nll-","dir":"Reference","previous_headings":"","what":"Method construct_nll()","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"Construct extract function handlers negative log likelihood function. handlers TMB's MakeADFun constructed returned. enables user e.g. choose optimization algorithm, just control optimization workflow.","code":""},{"path":"/reference/sdeTMB.html","id":"usage-18","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"","code":"sdeTMB$construct_nll(   data,   method = \"ekf\",   ode.solver = \"rk4\",   ode.timestep = diff(data$t),   loss = \"quadratic\",   loss_c = 3,   unscented_hyperpars = list(alpha = 1, beta = 0, kappa = 3 - private$number.of.states),   compile = FALSE,   silent = FALSE )"},{"path":"/reference/sdeTMB.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"data data.frame containing time-vector 't', observations inputs. observations can take NA-values. method character vector - one either \"ekf\", \"ukf\" \"tmb\". Sets estimation method. package three available methods implemented: natural TMB-style formulation latent states considered random effects integrated using Laplace approximation. method yields gradient (negative log) likelihood function respect fixed effects optimization. method slower although probably precision advantages, allows non-Gaussian observation noise (yet implemented). One-step / K-step residuals yet available package. (Continous-Discrete) Extended Kalman Filter system dynamics linearized handle potential non-linearities. computationally fastest method. (Continous-Discrete) Unscented Kalman Filter. higher order non-linear Kalman Filter improves mean covariance estimates system display high nonlinearity, circumvents necessity compute jacobian drift observation functions. package features currently available kalman filters, TMB limited parameter estimation. particular, straight-forward obtain k-step-ahead predictions methods (use predict S3 method), stochastic simulation also available cases long prediction horizons sought, normality assumption inaccurate. ode.solver Sets ODE solver used Kalman Filter methods solving moment differential equations. default \"euler\" Forward Euler method, alternatively classical 4th order Runge Kutta method available via \"rk4\". ode.timestep time-step used filtering schemes. time-step two different uses depending chosen method. Kalman Filters: time-step used numerically solving moment differential equations. Laplace Approximation: time-step used Euler-Maruyama simulation scheme simulating sample path stochastic differential equation, serves link together latent (random effects) states. defined step-size used calculate number steps observation time-points defined provided data. calculated number steps larger N.01 N integer, time-step reduced exactly N+1 steps taken observations step-size used two following ways depending chosen method: Kalman filters: time-step used step-size numerical Forward-Euler scheme compute prior state mean covariance estimate final time solution first second order moment differential equations. TMB method: time-step used step-size Euler-Maruyama scheme simulating sample path stochastic differential equation, serves link together latent (random effects) states. loss character vector. Sets loss function type (implemented kalman filter methods). loss function per default quadratic one-step residauls natural Gaussian (negative log) likelihood evaluated, tails distribution considered small .e. outliers weighted much, one can choose loss functions accounts . three available types available: Quadratic loss (quadratic). Quadratic-Linear (huber) Quadratic-Constant (tukey) cutoff Huber Tukey loss functions determined provided cutoff parameter loss_c. implementations losses approximations (pseudo-huber sigmoid approxmation respectively) smooth derivatives. loss_c cutoff value huber tukey loss functions. Defaults c=3 unscented_hyperpars three hyper-parameters alpha, beta kappa defining unscented transformation. compile boolean value. default (FALSE) compile C++ objective function assume already compiled corresponds specified model object. user's responsibility ensure correspondence specified model precompiled C++ object. precompiled C++ object found specified directory .e. <cppfile_directory>/<modelname>/(dll/) compile flag set TRUE. user makes changes system equations, observation equations, observation variances, algebraic relations lamperi transformations C++ object recompiled. silent logical value whether suppress printed messages 'Checking Data', 'Building Model', etc. Default behaviour (FALSE) print messages.","code":""},{"path":"/reference/sdeTMB.html","id":"method-estimate-","dir":"Reference","previous_headings":"","what":"Method estimate()","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"Estimate fixed effects parameters specified model.","code":""},{"path":"/reference/sdeTMB.html","id":"usage-19","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"","code":"sdeTMB$estimate(   data,   method = \"ekf\",   ode.solver = \"rk4\",   ode.timestep = diff(data$t),   loss = \"quadratic\",   loss_c = 3,   unscented_hyperpars = list(alpha = 1, beta = 0, kappa = 3 - private$number.of.states),   control = list(trace = 1, iter.max = 1e+05, eval.max = 1e+05),   use.hessian = FALSE,   laplace.residuals = FALSE,   unconstrained.optim = FALSE,   compile = FALSE,   silent = FALSE )"},{"path":"/reference/sdeTMB.html","id":"arguments-13","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"data data.frame containing time-vector 't', observations inputs. observations can take NA-values. method character vector - one either \"ekf\", \"ukf\" \"tmb\". Sets estimation method. package three available methods implemented: natural TMB-style formulation latent states considered random effects integrated using Laplace approximation. method yields gradient (negative log) likelihood function respect fixed effects optimization. method slower although probably precision advantages, allows non-Gaussian observation noise (yet implemented). One-step / K-step residuals yet available package. (Continous-Discrete) Extended Kalman Filter system dynamics linearized handle potential non-linearities. computationally fastest method. (Continous-Discrete) Unscented Kalman Filter. higher order non-linear Kalman Filter improves mean covariance estimates system display high nonlinearity, circumvents necessity compute jacobian drift observation functions. package features currently available kalman filters, TMB limited parameter estimation. particular, straight-forward obtain k-step-ahead predictions methods (use predict S3 method), stochastic simulation also available cases long prediction horizons sought, normality assumption inaccurate. ode.solver Sets ODE solver used Kalman Filter methods solving moment differential equations. default \"euler\" Forward Euler method, alternatively classical 4th order Runge Kutta method available via \"rk4\". ode.timestep numeric value. Sets time step-size numerical filtering schemes. defined step-size used calculate number steps observation time-points defined provided data. calculated number steps larger N.01 N integer, time-step reduced exactly N+1 steps taken observations step-size used two following ways depending chosen method: Kalman filters: time-step used step-size numerical Forward-Euler scheme compute prior state mean covariance estimate final time solution first second order moment differential equations. TMB method: time-step used step-size Euler-Maruyama scheme simulating sample path stochastic differential equation, serves link together latent (random effects) states. loss character vector. Sets loss function type (implemented kalman filter methods). loss function per default quadratic one-step residauls natural Gaussian (negative log) likelihood evaluated, tails distribution considered small .e. outliers weighted much, one can choose loss functions accounts . three available types available: Quadratic loss (quadratic). Quadratic-Linear (huber) Quadratic-Constant (tukey) cutoff Huber Tukey loss functions determined provided cutoff parameter loss_c. implementations losses approximations (pseudo-huber sigmoid approxmation respectively) smooth derivatives. loss_c cutoff value huber tukey loss functions. Defaults c=3 unscented_hyperpars three hyper-parameters alpha, beta kappa defining unscented transformation. control list control parameters parsed nlminb control argument. See ?stats::nlminb information use.hessian boolean value. default (TRUE) causes optimization algorithm stats::nlminb use fixed effects hessian (negative log) likelihood performing optimization. feature available kalman filter methods without random effects. laplace.residuals boolean - whether calculate one-step ahead residuls using method oneStepPredict. unconstrained.optim boolean value. TRUE optimization carried unconstrained .e. without parameter bounds specified add_parameters. compile boolean value. default (FALSE) compile C++ objective function assume already compiled corresponds specified model object. user's responsibility ensure correspondence specified model precompiled C++ object. precompiled C++ object found specified directory .e. <cppfile_directory>/<modelname>/(dll/) compile flag set TRUE. user makes changes system equations, observation equations, observation variances, algebraic relations lamperi transformations C++ object recompiled. silent logical value whether suppress printed messages 'Checking Data', 'Building Model', etc. Default behaviour (FALSE) print messages.","code":""},{"path":"/reference/sdeTMB.html","id":"method-simulate-","dir":"Reference","previous_headings":"","what":"Method simulate()","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"Perform prediction/filtration obtain state mean covariance estimates. predictions obtained solving moment equations n.ahead steps forward time using current step posterior state estimate initial condition.","code":""},{"path":"/reference/sdeTMB.html","id":"usage-20","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"","code":"sdeTMB$simulate(   data,   method = \"ekf\",   ode.timestep = diff(data$t),   ode.solver = \"rk4\",   pars = NULL,   initial.state = self$get_initial_state(),   n.sims = 100,   simulation.timestep = diff(data$t),   k.ahead = 1,   return.k.ahead = NULL,   unscented_hyperpars = list(alpha = 1, beta = 0, kappa = 3 - private$number.of.states),   silent = FALSE )"},{"path":"/reference/sdeTMB.html","id":"arguments-14","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"data data.frame containing time-vector 't', observations inputs. observations can take NA-values. method natural TMB-style formulation latent states considered random effects integrated using Laplace approximation. method yields gradient (negative log) likelihood function respect fixed effects optimization. method slower although probably precision advantages, allows non-Gaussian observation noise (yet implemented). One-step / K-step residuals yet available package. (Continous-Discrete) Extended Kalman Filter system dynamics linearized handle potential non-linearities. computationally fastest method. (Continous-Discrete) Unscented Kalman Filter. higher order non-linear Kalman Filter improves mean covariance estimates system display high nonlinearity, circumvents necessity compute jacobian drift observation functions. package features currently available kalman filters, TMB limited parameter estimation. particular, straight-forward obtain k-step-ahead predictions methods (use predict S3 method), stochastic simulation also available cases long prediction horizons sought, normality assumption inaccurate ode.timestep numeric value. Sets time step-size numerical filtering schemes. defined step-size used calculate number steps observation time-points defined provided data. calculated number steps larger N.01 N integer, time-step reduced exactly N+1 steps taken observations step-size used two following ways depending chosen method: Kalman filters: time-step used step-size numerical Forward-Euler scheme compute prior state mean covariance estimate final time solution first second order moment differential equations. TMB method: time-step used step-size Euler-Maruyama scheme simulating sample path stochastic differential equation, serves link together latent (random effects) states. ode.solver Sets ODE solver used Kalman Filter methods solving moment differential equations. default \"euler\" Forward Euler method, alternatively classical 4th order Runge Kutta method available via \"rk4\". pars fixed parameter vector parsed objective function prediction/filtration. default parameter values used initial parameters provided add_parameters, unless estimate function run, default values found optimum. initial.state named list two entries 'x0' 'p0' containing initial state covariance state n.sims number simulations simulation.timestep timestep used euler-maruyama scheme k.ahead integer specifying desired number time-steps (determined provided data time-vector) predictions made (integrating moment ODEs forward time without data updates). return.k.ahead numeric vector integers specifying n.ahead predictions returned. unscented_hyperpars three hyper-parameters alpha, beta kappa defining unscented transformation. silent logical value whether suppress printed messages 'Checking Data', 'Building Model', etc. Default behaviour (FALSE) print messages. return.covariance booelan value indicate whether covariance (instead correlation) returned.","code":""},{"path":"/reference/sdeTMB.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"data.frame contains time step posterior state estimate time.step (k = 0), prior state predictions (k = 1,...,n.ahead). return.covariance = TRUE state covariance/correlation matrix returned, otherwise marginal variances returned.","code":""},{"path":"/reference/sdeTMB.html","id":"method-predict-","dir":"Reference","previous_headings":"","what":"Method predict()","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"Perform prediction/filtration obtain state mean covariance estimates. predictions obtained solving moment equations n.ahead steps forward time using current step posterior state estimate initial condition.","code":""},{"path":"/reference/sdeTMB.html","id":"usage-21","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"","code":"sdeTMB$predict(   data,   method = \"ekf\",   ode.timestep = diff(data$t),   ode.solver = \"rk4\",   pars = NULL,   initial.state = self$get_initial_state(),   k.ahead = 1,   return.k.ahead = 0:k.ahead,   return.covariance = TRUE,   unscented_hyperpars = list(alpha = 1, beta = 0, kappa = 3 - private$number.of.states),   silent = FALSE )"},{"path":"/reference/sdeTMB.html","id":"arguments-15","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"data data.frame containing time-vector 't', observations inputs. observations can take NA-values. method natural TMB-style formulation latent states considered random effects integrated using Laplace approximation. method yields gradient (negative log) likelihood function respect fixed effects optimization. method slower although probably precision advantages, allows non-Gaussian observation noise (yet implemented). One-step / K-step residuals yet available package. (Continous-Discrete) Extended Kalman Filter system dynamics linearized handle potential non-linearities. computationally fastest method. (Continous-Discrete) Unscented Kalman Filter. higher order non-linear Kalman Filter improves mean covariance estimates system display high nonlinearity, circumvents necessity compute jacobian drift observation functions. package features currently available kalman filters, TMB limited parameter estimation. particular, straight-forward obtain k-step-ahead predictions methods (use predict S3 method), stochastic simulation also available cases long prediction horizons sought, normality assumption inaccurate. ode.timestep numeric value. Sets time step-size numerical filtering schemes. defined step-size used calculate number steps observation time-points defined provided data. calculated number steps larger N.01 N integer, time-step reduced exactly N+1 steps taken observations step-size used two following ways depending chosen method: Kalman filters: time-step used step-size numerical Forward-Euler scheme compute prior state mean covariance estimate final time solution first second order moment differential equations. TMB method: time-step used step-size Euler-Maruyama scheme simulating sample path stochastic differential equation, serves link together latent (random effects) states. ode.solver Sets ODE solver used Kalman Filter methods solving moment differential equations. default \"euler\" Forward Euler method, alternatively classical 4th order Runge Kutta method available via \"rk4\". pars fixed parameter vector parsed objective function prediction/filtration. default parameter values used initial parameters provided add_parameters, unless estimate function run, default values found optimum. initial.state named list two entries 'x0' 'p0' containing initial state covariance state k.ahead integer specifying desired number time-steps (determined provided data time-vector) predictions made (integrating moment ODEs forward time without data updates). return.k.ahead numeric vector integers specifying n.ahead predictions returned. return.covariance booelan value indicate whether covariance (instead correlation) returned. unscented_hyperpars three hyper-parameters alpha, beta kappa defining unscented transformation. silent logical value whether suppress printed messages 'Checking Data', 'Building Model', etc. Default behaviour (FALSE) print messages.","code":""},{"path":"/reference/sdeTMB.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"data.frame contains time step posterior state estimate time.step (k = 0), prior state predictions (k = 1,...,n.ahead). return.covariance = TRUE state covariance/correlation matrix returned, otherwise marginal variances returned.","code":""},{"path":"/reference/sdeTMB.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"Function print model object","code":""},{"path":"/reference/sdeTMB.html","id":"usage-22","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"","code":"sdeTMB$print()"},{"path":"/reference/sdeTMB.html","id":"method-summary-","dir":"Reference","previous_headings":"","what":"Method summary()","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"Summary function fit","code":""},{"path":"/reference/sdeTMB.html","id":"usage-23","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"","code":"sdeTMB$summary(correlation = FALSE)"},{"path":"/reference/sdeTMB.html","id":"arguments-16","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"correlation boolean value. default (FALSE) provide fixed effects parameter correlation matrix.","code":""},{"path":"/reference/sdeTMB.html","id":"method-plot-","dir":"Reference","previous_headings":"","what":"Method plot()","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"Function print model object","code":""},{"path":"/reference/sdeTMB.html","id":"usage-24","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"","code":"sdeTMB$plot(   plot.obs = 1,   pacf = FALSE,   extended = FALSE,   ggtheme = getggplot2theme() )"},{"path":"/reference/sdeTMB.html","id":"arguments-17","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"plot.obs vector indicate observations plotted . multiple chosen list plots observation returned. pacf logical indicate whether partial autocorrelations returned. default FALSE case histogram returned instead. extended logical. TRUE additional information printed ggtheme ggplot2 theme use creating ggplot.","code":""},{"path":"/reference/sdeTMB.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"objects class cloneable method.","code":""},{"path":"/reference/sdeTMB.html","id":"usage-25","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"","code":"sdeTMB$clone(deep = FALSE)"},{"path":"/reference/sdeTMB.html","id":"arguments-18","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for the 'sdeTMB' R6 class — sdeTMB","text":"deep Whether make deep clone.","code":""},{"path":[]},{"path":"/reference/set_initial_state.html","id":null,"dir":"Reference","previous_headings":"","what":"Set initial state mean and covariance — set_initial_state","title":"Set initial state mean and covariance — set_initial_state","text":"Declare initial state values .e. mean covariance system states.","code":""},{"path":"/reference/set_initial_state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set initial state mean and covariance — set_initial_state","text":"","code":"set_initial_state(initial.state, estimate = FALSE)"},{"path":"/reference/set_initial_state.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set initial state mean and covariance — set_initial_state","text":"initial.state named list two entries 'x0' 'p0' containing initial state covariance state estimate boolean value indicates whether initial conditions shall estimated fixed effects parameters. provided mean covariance used initial guesses","code":""},{"path":"/reference/summary.sdeTMB.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic summary of objects of class 'sdeTMB' — summary.sdeTMB","title":"Basic summary of objects of class 'sdeTMB' — summary.sdeTMB","text":"Basic summary objects class 'sdeTMB'","code":""},{"path":"/reference/summary.sdeTMB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic summary of objects of class 'sdeTMB' — summary.sdeTMB","text":"","code":"# S3 method for sdeTMB summary(object, correlation = FALSE)"},{"path":"/reference/summary.sdeTMB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Basic summary of objects of class 'sdeTMB' — summary.sdeTMB","text":"huge amount information","code":""},{"path":"/news/index.html","id":"sdetmb-100","dir":"Changelog","previous_headings":"","what":"sdeTMB 1.0.0","title":"sdeTMB 1.0.0","text":"first release package","code":""}]
